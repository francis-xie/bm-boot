package com.emis.app.migration;import com.emis.file.emisDirectory;import com.emis.file.emisFileMgr;import com.emis.file.emisFile;import com.emis.util.emisUtil;import javax.servlet.ServletContext;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.IOException;import java.util.ArrayList;import java.util.Enumeration;import java.util.Hashtable;import java.util.Iterator;/** Track+[19474] Dana 2012/02/22 調整migration欄位下傳長度支持在emisprop設定,使用方式:參數名稱用兩個@@包裹,如:@EP_P_NAME_S_LEN@* */public final class emisMigrationLister implements emisParsableDoc {  ArrayList migrationSet = new ArrayList(64);  private String MigrationList[] = null;  public emisMigrationLister(ServletContext context) {    BufferedReader br = null;    try {      br = new BufferedReader(emisMiConfig.getFile(context, null).getReader());      QDParser.parse(this, br, context);      emisFileMgr oFileMgr;      oFileMgr = emisFileMgr.getInstance(context);      emisDirectory _oConfDir = oFileMgr.getDirectory("root").subDirectory("web-inf");      emisDirectory _oMDir = _oConfDir.subDirectory("migration");      Enumeration e = _oMDir.getFileList("*.xml");      while (e.hasMoreElements()) {          emisFile f = (emisFile) e.nextElement();          migrationSet.add(emisUtil.stringReplace(f.getFileName().toUpperCase(), ".XML","",""));      }    } catch (FileNotFoundException e) {    	e.printStackTrace();      // Log here;  //To change body of catch statement use Options | File Templates.    } catch (Exception e) {    	e.printStackTrace();      // Log here;  //To change body of catch statement use Options | File Templates.    } finally {      if (br != null) {        try {          br.close();        } catch (IOException e) {          // Log here;  //To change body of catch statement use Options | File Templates.        }      }    }  }  public String[] getMigrationList() {//        loader.    if (MigrationList == null && migrationSet.size() != 0) {      MigrationList = new String[migrationSet.size()];      Iterator it = migrationSet.iterator();      int i = 0;      while (it.hasNext()) {        MigrationList[i++] = (String) it.next();      }    }    return MigrationList;  }  public void startDocument() {  }  public void endDocument() {  }  public void startElement(String elem, Hashtable h) {    if (elem.equalsIgnoreCase("migration")) {      String s = (String) h.get("name");      migrationSet.add(s.toUpperCase());    }  }  public void endElement(String elem) {  }  public void text(String text) {  }}