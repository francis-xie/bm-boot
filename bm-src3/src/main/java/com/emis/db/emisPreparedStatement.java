/* $Header: /repository/src3/src/com/emis/db/emisPreparedStatement.java,v 1.1.1.1 2005/10/14 12:42:04 andy Exp $ * * 2004/05/25 Jerry: PreparedStatement.executeUpdate未將SQL寫入Proxy中 *                   executeUpdate的敘述未列入Top10處理 */package com.emis.db;import com.emis.audit.emisAudit;import java.io.InputStream;import java.io.PrintWriter;import java.io.Reader;import java.math.BigDecimal;import java.sql.*;import java.util.ArrayList;import java.util.Calendar;/** *  java.sql.emisPreparedStatement 的 wrapper class *  這樣可以方便我們作一些監控 */public class emisPreparedStatement extends emisStatement implements PreparedStatement {  private PreparedStatement pStmt_;  public emisPreparedStatement(emisDbMgr dbMgr, emisConnectProxy oProxy, PreparedStatement pstmt, String sSQL) {	  super(dbMgr,oProxy,pstmt);	  sSQL_ = sSQL;	  pStmt_ = pstmt;  }    /*===========below is preparedstatement defined function===============*/  public ResultSet executeQuery() throws SQLException {    try {      this.StartExecute();      return pStmt_.executeQuery();          } catch (SQLException sqlerr) {	    this.Error(sqlerr);	    throw sqlerr;    } finally {      this.EndExecute();    }  }  public int executeUpdate() throws SQLException {    try {    	this.StartExecute();        return pStmt_.executeUpdate();    } catch (SQLException sqlerr) {	    this.Error(sqlerr);	    throw sqlerr;    } finally {    	    	this.EndExecute();    }  }  public void setNull(int parameterIndex, int sqlType) throws SQLException {	    pStmt_.setNull(parameterIndex, sqlType);    ensureCapacity(parameterIndex);    oParam_.remove(parameterIndex - 1);  }  public void setBoolean(int parameterIndex, boolean x) throws SQLException {    pStmt_.setBoolean(parameterIndex, x);    ensureCapacity(parameterIndex);    oParam_.set(parameterIndex - 1, new Boolean(x));  }  public void setByte(int parameterIndex, byte x) throws SQLException {    pStmt_.setByte(parameterIndex, x);  }  public void setShort(int parameterIndex, short x) throws SQLException {    pStmt_.setShort(parameterIndex, x);  }  public void setInt(int parameterIndex, int x) throws SQLException {    pStmt_.setInt(parameterIndex, x);    ensureCapacity(parameterIndex);    oParam_.set(parameterIndex - 1, new Integer(x));  }  public void setLong(int parameterIndex, long x) throws SQLException {    pStmt_.setLong(parameterIndex, x);  }  public void setFloat(int parameterIndex, float x) throws SQLException {    pStmt_.setFloat(parameterIndex, x);    ensureCapacity(parameterIndex);    oParam_.set(parameterIndex - 1, new Float(x));  }  public void setDouble(int parameterIndex, double x) throws SQLException {    pStmt_.setDouble(parameterIndex, x);    ensureCapacity(parameterIndex);    oParam_.set(parameterIndex - 1, new Double(x));  }  public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {    pStmt_.setBigDecimal(parameterIndex, x);    ensureCapacity(parameterIndex);    oParam_.set(parameterIndex - 1, x);  }  public void setString(int parameterIndex, String x) throws SQLException {    pStmt_.setString(parameterIndex, x);    ensureCapacity(parameterIndex);    oParam_.set(parameterIndex - 1, x);  }  public void setBytes(int parameterIndex, byte[] x) throws SQLException {    pStmt_.setBytes(parameterIndex, x);  }  public void setDate(int parameterIndex, Date x) throws SQLException {    pStmt_.setDate(parameterIndex, x);  }  public void setTime(int parameterIndex, Time x) throws SQLException {    pStmt_.setTime(parameterIndex, x);  }  public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {    pStmt_.setTimestamp(parameterIndex, x);  }  public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {    pStmt_.setAsciiStream(parameterIndex, x, length);  }  /**   * @deprecated   */  public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {    pStmt_.setUnicodeStream(parameterIndex, x, length);  }  public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {    pStmt_.setBinaryStream(parameterIndex, x, length);  }  public void clearParameters() throws SQLException {    this.oProxy_.touch();    pStmt_.clearParameters();    oParam_.clear();  }  public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {    pStmt_.setObject(parameterIndex, x, targetSqlType, scale);  }  @Override  public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {  }  @Override  public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {  }  @Override  public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {  }  @Override  public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {  }  @Override  public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {  }  @Override  public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {  }  @Override  public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {  }  public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {    pStmt_.setObject(parameterIndex, x, targetSqlType);  }  public void setObject(int parameterIndex, Object x) throws SQLException {    pStmt_.setObject(parameterIndex, x);  }  public boolean execute() throws SQLException {	  try {		  this.StartExecute();		  return pStmt_.execute();	  } catch (SQLException sqlerr) {		  this.Error(sqlerr);		  throw sqlerr;	  } finally {		  this.EndExecute();	  }  }  public void addBatch() throws SQLException {	oProxy_.touch();    pStmt_.addBatch();  }  public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {    pStmt_.setCharacterStream(parameterIndex, reader, length);  }  public void setRef(int i, Ref x) throws SQLException {    pStmt_.setRef(i, x);  }  public void setBlob(int i, Blob x) throws SQLException {    pStmt_.setBlob(i, x);  }  public void setClob(int i, Clob x) throws SQLException {    pStmt_.setClob(i, x);  }  public void setArray(int i, Array x) throws SQLException {    pStmt_.setArray(i, x);  }  public ResultSetMetaData getMetaData() throws SQLException {    oProxy_.touch();    return pStmt_.getMetaData();  }  public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {    pStmt_.setDate(parameterIndex, x, cal);  }  public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {    pStmt_.setTime(parameterIndex, x, cal);  }  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {    pStmt_.setTimestamp(parameterIndex, x, cal);  }  public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {    pStmt_.setNull(parameterIndex, sqlType, typeName);    ensureCapacity(parameterIndex);    oParam_.remove(parameterIndex - 1);  }  public void addBatch(String sql) throws SQLException {    this.oProxy_.touch();	sSQL_ = sql;    pStmt_.addBatch(sql);  }  public void clearBatch() throws SQLException {    this.oProxy_.touch();    pStmt_.clearBatch();  }  public int[] executeBatch() throws SQLException {	try {		 this.StartExecute();		return pStmt_.executeBatch();    } catch (SQLException sqlerr) {	    this.Error(sqlerr);	    throw sqlerr;	} finally {		 this.EndExecute();		}  }    public ParameterMetaData getParameterMetaData() throws SQLException {	   return pStmt_.getParameterMetaData();  }  @Override  public void setRowId(int parameterIndex, RowId x) throws SQLException {  }  @Override  public void setNString(int parameterIndex, String value) throws SQLException {  }  @Override  public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {  }  @Override  public void setNClob(int parameterIndex, NClob value) throws SQLException {  }  @Override  public void setClob(int parameterIndex, Reader reader) throws SQLException {  }  @Override  public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {  }  @Override  public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {  }  @Override  public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {  }  @Override  public void setNClob(int parameterIndex, Reader reader) throws SQLException {  }  @Override  public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {  }  @Override  public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {  }  public void setURL(int parameterIndex, java.net.URL x) throws SQLException {	   pStmt_.setURL(parameterIndex,x);  }}