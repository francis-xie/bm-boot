package com.emis.db;import java.sql.*;import java.util.ArrayList;import java.util.Map;import java.util.Properties;import java.util.concurrent.Executor;/** *  java.sql.Connection 的 wrapper class *  這樣可以方便我們作一些監控 * *  @see java.sql.CallableStatement *  @see com.emis.db.emisConnection */public class emisConnectionWrapper implements Connection{  private Connection conn_;  private ArrayList openstmts = new ArrayList();  public emisConnectionWrapper( Connection conn ) throws Exception  {    conn_  =  conn;  }  public Statement createStatement() throws SQLException {    Statement stmt =  conn_.createStatement();    openstmts.add(stmt);    return stmt;  }  public PreparedStatement prepareStatement(String sql) throws SQLException {    PreparedStatement p = conn_.prepareStatement(sql);    openstmts.add(p);    return p;  }  public CallableStatement prepareCall(String sql) throws SQLException {    CallableStatement c = conn_.prepareCall(sql);    openstmts.add(c);    return c;  }  public String nativeSQL(String sql) throws SQLException {    return conn_.nativeSQL(sql);  }  public void setAutoCommit(boolean autoCommit) throws SQLException {    conn_.setAutoCommit(autoCommit);  }  public boolean getAutoCommit() throws SQLException {    return conn_.getAutoCommit();  }  public void commit() throws SQLException {    conn_.commit();  }  public void rollback() throws SQLException {    conn_.rollback();  }  /**   * change the close action   */  public void close() throws SQLException {    clean();  }  protected void clean()  {    try {      for(int i=0; i < openstmts.size(); i++)      {          Statement st = (Statement) openstmts.get(i);          try {            st.close();          } catch (Exception ignore1) {}      }    } catch (Exception ignore2) {    }  }  public boolean isClosed() throws SQLException {    return conn_.isClosed();  }  public DatabaseMetaData getMetaData() throws SQLException {    return conn_.getMetaData();  }  public void setReadOnly(boolean readOnly) throws SQLException {    conn_.setReadOnly(readOnly);  }  public boolean isReadOnly() throws SQLException {    return conn_.isReadOnly();  }  public void setCatalog(String catalog) throws SQLException {    conn_.setCatalog(catalog);  }  public String getCatalog() throws SQLException {    return conn_.getCatalog();  }  public void setTransactionIsolation(int level) throws SQLException {    conn_.setTransactionIsolation(level);  }  public int getTransactionIsolation() throws SQLException {    return conn_.getTransactionIsolation();  }  public SQLWarning getWarnings() throws SQLException {    return conn_.getWarnings();  }  public void clearWarnings() throws SQLException {    conn_.clearWarnings();  }  public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {    return conn_.createStatement(resultSetType,resultSetConcurrency);  }  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {    return conn_.prepareStatement(sql,resultSetType,resultSetConcurrency);  }  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {    return conn_.prepareCall(sql,resultSetType,resultSetConcurrency);  }  public Map getTypeMap() throws SQLException {    return conn_.getTypeMap();  }  public void setTypeMap(Map map) throws SQLException {    conn_.setTypeMap(map);  }     public void releaseSavepoint(Savepoint savepoint) throws SQLException {      conn_.releaseSavepoint(savepoint);  }  public void rollback(Savepoint savepoint) throws SQLException {      conn_.rollback(savepoint);  }  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {      return conn_.prepareStatement(sql,autoGeneratedKeys);  }  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {      return conn_.prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability);  }  public Savepoint setSavepoint() throws SQLException {      return conn_.setSavepoint();  }  public void setHoldability(int holdability) throws SQLException {      conn_.setHoldability(holdability);  }  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {      return conn_.prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);  }  public int getHoldability() throws SQLException {      return conn_.getHoldability();  }  public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {      return conn_.createStatement(resultSetType,resultSetConcurrency,resultSetHoldability);  }  public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {      return conn_.prepareStatement(sql,columnNames);  }  @Override  public Clob createClob() throws SQLException {    return null;  }  @Override  public Blob createBlob() throws SQLException {    return null;  }  @Override  public NClob createNClob() throws SQLException {    return null;  }  @Override  public SQLXML createSQLXML() throws SQLException {    return null;  }  @Override  public boolean isValid(int timeout) throws SQLException {    return false;  }  @Override  public void setClientInfo(String name, String value) throws SQLClientInfoException {  }  @Override  public void setClientInfo(Properties properties) throws SQLClientInfoException {  }  @Override  public String getClientInfo(String name) throws SQLException {    return null;  }  @Override  public Properties getClientInfo() throws SQLException {    return null;  }  @Override  public Array createArrayOf(String typeName, Object[] elements) throws SQLException {    return null;  }  @Override  public Struct createStruct(String typeName, Object[] attributes) throws SQLException {    return null;  }  @Override  public void setSchema(String schema) throws SQLException {  }  @Override  public String getSchema() throws SQLException {    return null;  }  @Override  public void abort(Executor executor) throws SQLException {  }  @Override  public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {  }  @Override  public int getNetworkTimeout() throws SQLException {    return 0;  }  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {      return conn_.prepareStatement(sql,columnIndexes);  }  public Savepoint setSavepoint(String name) throws SQLException {      return setSavepoint(name);  }  @Override  public <T> T unwrap(Class<T> iface) throws SQLException {    return null;  }  @Override  public boolean isWrapperFor(Class<?> iface) throws SQLException {    return false;  }}