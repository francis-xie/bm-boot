/* * $Header: /repository/src3/src/com/emis/db/oracle/emisDbConnectorOrclImpl.java,v 1.1.1.1 2005/10/14 12:42:08 andy Exp $ * * Copyright (c) EMIS Corp. */package com.emis.db.oracle;import com.emis.db.emisSQLCache;import com.emis.spool.emisPoolable;import com.emis.trace.emisTracer;import oracle.jdbc.pool.OracleConnectionPoolDataSource;import javax.servlet.ServletContext;import javax.sql.PooledConnection;import java.sql.*;import java.util.Properties;/** *  this is Oracle Implementation for database spool *  in JDBC 2.0 */public class emisDbConnectorOrclImpl extends com.emis.db.emisDbConnectorJDBC20 {  public emisDbConnectorOrclImpl(ServletContext oContext, Properties props) throws Exception {    super(oContext, props);  }  protected void createSource(Properties props) throws java.lang.Exception {    OracleConnectionPoolDataSource _Ocpds = new OracleConnectionPoolDataSource();    String _url = (String) props.get("url");    String _username = props.getProperty("username", "");    String _password = props.getProperty("password", "");    String _charset = props.getProperty("encoding");    if (_charset == null) _charset = "ISO8859_1";    sDbCharset_ = _charset;    _Ocpds.setURL(_url);    _Ocpds.setUser(_username);    _Ocpds.setPassword(_password);    this.oDataSource_ = _Ocpds;  }  public emisPoolable generateRealPooledObject(int nTimeOut) throws Exception {    PooledConnection _oPool = null;    emisPoolable _oPooled = null;    try {      oDataSource_.setLoginTimeout(nTimeOut);      _oPool = oDataSource_.getPooledConnection();      // we set Oracle Database to AMERICAN_AMERICA.WE8ISO8859P1      // so the client NLS should set to the same...      if ((sDbCharset_ != null) && (sDbCharset_.indexOf("8859") != -1)) {        // 這樣 Exception 的錯誤訊息才不會是亂碼        Connection _oConn = _oPool.getConnection();        try {          Statement _oStmt = _oConn.createStatement();          try {            _oStmt.execute("ALTER SESSION SET NLS_LANGUAGE = AMERICAN");            _oStmt.execute("ALTER SESSION SET NLS_TERRITORY= AMERICA");          } finally {            _oStmt.close();          }        } finally {          _oConn.close();        }      }      _oPooled = new emisConnectProxyOrcl(oContext_, _oPool, this);      return _oPooled;    } catch (SQLException ignore) {      emisTracer.get(oContext_).warning(this, ignore);      throw ignore;    }  }  public String getSequenceNumber(Connection oConn, String sSequenceName, boolean checkAutoDrop, String sDropCondition, String sFormat) throws SQLException {    CallableStatement _oCall = oConn.prepareCall("begin ? := eposgetformatedseq(?,?,?,?); end;");    try {      _oCall.registerOutParameter(1, Types.VARCHAR);      _oCall.setString(2, sSequenceName);      _oCall.setInt(3, checkAutoDrop ? 1:0);      _oCall.setString(4, sDropCondition);      _oCall.setString(5, sFormat);      _oCall.execute();      return _oCall.getString(1);    } finally {      _oCall.close();      _oCall = null;    }  }  public String getStoreSequence(Connection oConn, String sSequenceName, String sSNO, String sDropCondition, String sFormat) throws SQLException {    if (sDropCondition == null)      sDropCondition = "";    CallableStatement call = oConn.prepareCall("begin ?:=eposGetStoreSeq(?,?,?,?); end;");    try {//        System.out.println(sSNO+":"+sSequenceName+":"+sDropCondition+":"+sFormat);      call.registerOutParameter(1, Types.VARCHAR);      call.setString(2, sSNO);      call.setString(3, sSequenceName);      call.setString(4, sDropCondition);      call.setString(5, sFormat);      call.execute();      String _sSeqValue = call.getString(1);      return _sSeqValue;    } finally {      try {        call.close();      } catch (Exception ignore) {      }    }  }  /*  public emisMenuPermission getMenuPermission(Connection oConn , String sUserId,String sGroup,String sStoreNo) throws SQLException  {      PreparedStatement pstmt = oConn.prepareStatement(      "select distinct u.keys,u.BTNADD,u.BTNUPD,u.BTNDEL,u.BTNRPT from Userrights u, Menus m where "+      "u.USERID=? and u.Rights='Y'  and (u.S_NO is null or u.S_NO=?) and (u.KEYS=m.KEYS or m.MENU_TYPE is null)  "+      "union "+      "select distinct u.keys,u.BTNADD,u.BTNUPD,u.BTNDEL,u.BTNRPT from Userrights u, Menus m where "+      "u.USERGROUPS=?  and u.Rights='Y'  and (u.KEYS=m.KEYS or m.MENU_TYPE is null) ");      try {          pstmt.setString(1,sUserId);          pstmt.setString(2,(sStoreNo == null) ? "":sStoreNo);          pstmt.setString(3,(sGroup == null) ? "":sGroup);          ResultSet rs = pstmt.executeQuery();          return new emisMenuPermission(rs);      } finally {          pstmt.close();      }  }  */  public void expireSQLCache(Connection oConn, String sSQLName) throws SQLException {    PreparedStatement pstmt = oConn.prepareStatement("UPDATE " + emisSQLCache.SQLCACHETABLE + " SET LASTUPDATE=SYSDATE WHERE SQLNAME=?");    try {      pstmt.setString(1, sSQLName);      pstmt.executeUpdate();    } finally {      pstmt.close();      pstmt = null;    }  }/*    private String getColumnType(int nSQLType,String nSize)    {        if( nSQLType == Types.NUMERIC )        {           int idx = nSize.indexOf(".");           if( idx != -1 )           {               return " NUMBER(" + nSize.substring(0,idx) + ","+ nSize.substring(idx+1) + ") " ;           } else {               return " NUMBER(" + nSize +")" ;           }        } else {           return " VARCHAR2("+nSize+") " ;        }    }    public String getCreateTempTableScript(String sTableName,String [] sColumns,int [] nSQLType,String [] sSize)    {       StringBuffer oBuf = new StringBuffer();       oBuf.append("CREATE TABLE ").append(sTableName).append(" (\n");       int nLen = sColumns.length;       if( nLen > 0 )       {          oBuf.append( sColumns[0] + " " + getColumnType(nSQLType[0],sSize[0]));       }       for( int i=1 ; i < nLen ;i++)       {          oBuf.append( ",\n").append(sColumns[i]).append(" ").append(getColumnType(nSQLType[i],sSize[i]));       }       oBuf.append(") TABLESPACE USERS");//       System.out.println(oBuf.toString());       return oBuf.toString();    }    public String getDropTableScript(String sTableName)    {//        System.out.println("DROP TABLE "+ sTableName + " CASCADE CONSTRAINTS");        return "DROP TABLE "+ sTableName + " CASCADE CONSTRAINTS";    }*/  /** 將錯誤碼轉換成字串, 以利使用者描述與理解. */  public String errToMsg(SQLException e) {    if (e == null) return null;    int nErrCode = e.getErrorCode();    if (nErrCode == 1)      return "編號重覆:請重新輸入(1)";    return e.getMessage() + "(" + nErrCode + ")";  }  public boolean isPKError(SQLException e) {    if (e == null) return false;    int nErrCode = e.getErrorCode();    if (nErrCode == 1)      return true;    return true;  }  public String dualTestSQL() {    return "SELECT 1 FROM DUAL";  }  /**   * 获取数库的类型(如一种驱动可面向多种不同数据请写不同的Impl)   * @return   */  public String getDBType() {    return "oracle";  }}