/* $Header: /repository/src3/src/com/emis/servlet/emisSchedMonitor.java,v 1.1.1.1 2005/10/14 12:42:55 andy Exp $ * * 2004/05/26 Jerry: 增加記錄停止時的最後一個類別 */package com.emis.servlet;import com.emis.schedule.emisScheduleMgr;import com.emis.schedule.emisTask;import com.emis.server.emisServer;import com.emis.server.emisServerFactory;import com.emis.util.emisUtil;import javax.servlet.ServletContext;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Iterator;public class emisSchedMonitor extends HttpServlet {  public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    response.setContentType("text/html;charset=UTF-8");    PrintWriter out = response.getWriter();    ServletContext application = getServletContext();    out.println("<html>");    out.println("<head>");    out.println("<style>");    out.println(".smallfont  {  font-family: '新細明體'; font-size: 10pt}");    out.println("</style>");    out.println("<META HTTP-EQUIV='Refresh' CONTENT='10'>");    out.println("</head>");    out.println("<body>");    try {      emisScheduleMgr _oMgr = emisScheduleMgr.getInstance(application);      emisServer _oServer = emisServerFactory.getServer(application);      String _sServerName = _oServer.getServerName();      _sServerName = _sServerName.toUpperCase();      if (!_oMgr.isAlive()) {        emisTask _oTask = (emisTask) application.getAttribute("SCHED_LAST_TASK");        if (_oTask != null)          out.println("排程已停止; 最後的排程項目: " + _oTask.getName() + "<br>");        _oTask = (emisTask) application.getAttribute("SCHED_LAST_TASK_ALIVE");        if (_oTask != null)          out.println("排程已停止; 最後Alive的排程項目: " + _oTask.getName() + "<br>");      }      out.println("排程是否存在: " + _oMgr.isAlive() + "(" + _sServerName + ")");      out.println("現在系統時間: " + emisUtil.todayDate("/") + " " + emisUtil.todayTimeS(true));      out.println("<HR>");      Iterator it = _oMgr.getTasks();      out.println("<table width='100%' class='smallfont' border='0' cellspacing='1' BgColor='Navy'>");      out.println("  <tr bgcolor='99ccff' align='center'><td>序</td><td>名稱</td><td>類別</td></td><td>狀態</td><td>执行种类</td><td>下次執行時間</td><td>日期設定</td><td>週期(mili)</td></tr>");      int _iCount = 0;      String[] _aColors = {"ffffcc", "azure"};      while (it.hasNext()) {        emisTask task = (emisTask) it.next();        String _sColor = _aColors[_iCount % 2];        out.print("<TR bgcolor='" + _sColor + "'>");        long nextTime = task.nextExecutionTime();        Date d = new Date(nextTime);        SimpleDateFormat _oFmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");        String _sTime = _oFmt.format(d);        _iCount++;        out.print("<TD>" + _iCount + "</TD>");        out.print("<TD>" + task.getName() + "</TD>");        out.print("<TD>" + task + "</TD>");        String _sStatus = task.getStatus();        _sColor = (_sStatus.equals("執行中")) ? "Red" : _sColor;        out.print("<TD BgColor='" + _sColor + "'>" + _sStatus + "</TD>");        out.print("<TD>" + task.levelToStr() + "</TD>");        out.print("<TD>" + _sTime + "</TD>");        out.print("<TD>" + task.getYear() + task.getMonth() + task.getDay() + task.getHour() + task.getMinute() + "</TD>");        out.print("<TD>" + task.getInterval() + "</TD>");        out.println("</TR>");      }      out.println("</table>");      out.println("<br><br>手动执行中的排程: ");      out.println("<HR>");      it = _oMgr.getManualTasks();      out.println("<table width='100%' class='smallfont' border='0' cellspacing='1' BgColor='Navy'>");      out.println("  <tr bgcolor='99ccff' align='center'><td width='50px'>序</td><td width='200px'>名稱</td><td>類別</td><td width='120px'>狀態</td><td width='200px'>执行种类</td></tr>");      _iCount = 0;      while (it.hasNext()) {        emisTask task = (emisTask) it.next();        String _sColor = _aColors[_iCount % 2];        out.print("<TR bgcolor='" + _sColor + "'>");        _iCount++;        out.print("<TD>" + _iCount + "</TD>");        out.print("<TD>" + task.getName() + "</TD>");        out.print("<TD>" + task + "</TD>");        String _sStatus = task.getStatus();        _sColor = (_sStatus.equals("執行中")) ? "Red" : _sColor;        out.print("<TD BgColor='" + _sColor + "'>" + _sStatus + "</TD>");        out.print("<TD>" + task.levelToStr() + "</TD>");        out.println("</TR>");      }      out.println("</table>");    } catch (Exception e) {      e.printStackTrace(out);    }    out.println("</body>");    out.println("</html>");  }  public void doGet(HttpServletRequest p0, HttpServletResponse p1) throws ServletException, IOException {    service(p0, p1);  }  public void doPost(HttpServletRequest p0, HttpServletResponse p1) throws ServletException, IOException {    service(p0, p1);  }}