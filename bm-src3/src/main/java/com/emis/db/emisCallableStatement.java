/* $Header: /repository/src3/src/com/emis/db/emisCallableStatement.java,v 1.1.1.1 2005/10/14 12:42:00 andy Exp $ * 2004/05/26: executeUpdate的敘述未列入Top10處理 */package com.emis.db;import com.emis.audit.emisAudit;import java.io.InputStream;import java.io.PrintWriter;import java.io.Reader;import java.math.BigDecimal;import java.sql.*;import java.util.ArrayList;import java.util.Calendar;import java.util.Map;/** *  java.sql.CallableStatement 的 wrapper class *  這樣可以方便我們作一些監控 * *  @see java.sql.CallableStatement */public class emisCallableStatement extends emisPreparedStatement implements CallableStatement {  CallableStatement cstmt_ = null;  public emisCallableStatement(emisDbMgr dbMgr, emisConnectProxy oProxy, CallableStatement cstmt, String sSQL) {	  super(dbMgr,oProxy,cstmt,sSQL);	  cstmt_ = cstmt;  }  public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {    cstmt_.registerOutParameter(parameterIndex, sqlType);  }  public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {    cstmt_.registerOutParameter(parameterIndex, sqlType, scale);  }  public boolean wasNull() throws SQLException {    return cstmt_.wasNull();  }  public String getString(int parameterIndex) throws SQLException {    return cstmt_.getString(parameterIndex);  }  public boolean getBoolean(int parameterIndex) throws SQLException {    return cstmt_.getBoolean(parameterIndex);  }  public byte getByte(int parameterIndex) throws SQLException {    return cstmt_.getByte(parameterIndex);  }  public short getShort(int parameterIndex) throws SQLException {    return cstmt_.getShort(parameterIndex);  }  public int getInt(int parameterIndex) throws SQLException {    return cstmt_.getInt(parameterIndex);  }  public long getLong(int parameterIndex) throws SQLException {    return cstmt_.getLong(parameterIndex);  }  public float getFloat(int parameterIndex) throws SQLException {    return cstmt_.getFloat(parameterIndex);  }  public double getDouble(int parameterIndex) throws SQLException {    return cstmt_.getDouble(parameterIndex);  }  public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {    return cstmt_.getBigDecimal(parameterIndex, scale);  }  public byte[] getBytes(int parameterIndex) throws SQLException {    return cstmt_.getBytes(parameterIndex);  }  public java.sql.Date getDate(int parameterIndex) throws SQLException {    return cstmt_.getDate(parameterIndex);  }  public java.sql.Time getTime(int parameterIndex) throws SQLException {    return cstmt_.getTime(parameterIndex);  }  public java.sql.Timestamp getTimestamp(int parameterIndex) throws SQLException {    return cstmt_.getTimestamp(parameterIndex);  }  public Object getObject(int parameterIndex) throws SQLException {    return cstmt_.getObject(parameterIndex);  }  public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {    return cstmt_.getBigDecimal(parameterIndex);  }  public Object getObject(int i, Map map) throws SQLException {    return cstmt_.getObject(i, map);  }  public Ref getRef(int i) throws SQLException {    return cstmt_.getRef(i);  }  public Blob getBlob(int i) throws SQLException {    return cstmt_.getBlob(i);  }  public Clob getClob(int i) throws SQLException {    return cstmt_.getClob(i);  }  public Array getArray(int i) throws SQLException {    return cstmt_.getArray(i);  }  public java.sql.Date getDate(int parameterIndex, Calendar cal) throws SQLException {    return cstmt_.getDate(parameterIndex, cal);  }  public java.sql.Time getTime(int parameterIndex, Calendar cal) throws SQLException {    return cstmt_.getTime(parameterIndex, cal);  }  public java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {    return cstmt_.getTimestamp(parameterIndex, cal);  }  public void registerOutParameter(int paramIndex, int sqlType, String typeName) throws SQLException {    cstmt_.registerOutParameter(paramIndex, sqlType, typeName);  }   public void setBoolean(String parameterName, boolean x) throws SQLException {   cstmt_.setBoolean(parameterName,x);   }   public void setFloat(String parameterName, float x) throws SQLException {   cstmt_.setFloat(parameterName,x);   }   public void setShort(String parameterName, short x) throws SQLException {   cstmt_.setShort(parameterName,x);   }   public double getDouble(String parameterName) throws SQLException {   return cstmt_.getDouble(parameterName);   }   public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {   cstmt_.registerOutParameter(parameterName,sqlType,scale);   }   public void registerOutParameter(String parameterName, int sqlType) throws SQLException {   cstmt_.registerOutParameter(parameterName,sqlType);   }   public void setDate(String parameterName, java.sql.Date x, Calendar cal) throws SQLException {   cstmt_.setDate(parameterName,x,cal);   }   public java.net.URL getURL(int parameterIndex) throws SQLException {   return cstmt_.getURL(parameterIndex);   }   public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {   cstmt_.setBigDecimal(parameterName,x);   }   public java.sql.Timestamp getTimestamp(String parameterName) throws SQLException {   return cstmt_.getTimestamp(parameterName);   }   public byte getByte(String parameterName) throws SQLException {   return cstmt_.getByte(parameterName);   }   public java.sql.Date getDate(String parameterName, Calendar cal) throws SQLException {   return cstmt_.getDate(parameterName,cal);   }   public Clob getClob(String parameterName) throws SQLException {   return cstmt_.getClob(parameterName);   }   public int getResultSetHoldability() throws SQLException {   return cstmt_.getResultSetHoldability();   }   public void setDate(String parameterName, java.sql.Date x) throws SQLException {   cstmt_.setDate(parameterName,x);   }   public void setDouble(String parameterName, double x) throws SQLException {   cstmt_.setDouble(parameterName,x);   }   public void setObject(String parameterName, Object x) throws SQLException {   cstmt_.setObject(parameterName,x);   }   public void setTime(String parameterName, java.sql.Time x) throws SQLException {   cstmt_.setTime(parameterName,x);   }   public Object getObject(String parameterName, java.util.Map map) throws SQLException {   return cstmt_.getObject(parameterName,map);   }   public java.sql.Date getDate(String parameterName) throws SQLException {   return cstmt_.getDate(parameterName);   }   public void setString(String parameterName, String x) throws SQLException {   cstmt_.setString(parameterName,x);   }   public Array getArray(String parameterName) throws SQLException {   return cstmt_.getArray(parameterName);   }   public java.sql.Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {   return cstmt_.getTimestamp(parameterName,cal);   }   public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {   cstmt_.setNull(parameterName,sqlType,typeName);   }   public int getInt(String parameterName) throws SQLException {   return cstmt_.getInt(parameterName);   }   public byte[] getBytes(String parameterName) throws SQLException {   return cstmt_.getBytes(parameterName);   }   public short getShort(String parameterName) throws SQLException {   return cstmt_.getShort(parameterName);   }   public void setInt(String parameterName, int x) throws SQLException {   cstmt_.setInt(parameterName,x);   }   public java.sql.Time getTime(String parameterName) throws SQLException {   return cstmt_.getTime(parameterName);   }   public void setBytes(String parameterName, byte[] x) throws SQLException {   cstmt_.setBytes(parameterName,x);   }   public void setTimestamp(String parameterName, java.sql.Timestamp x) throws SQLException {   cstmt_.setTimestamp(parameterName,x);   }   public Ref getRef(String parameterName) throws SQLException {   return cstmt_.getRef(parameterName);   }   public ParameterMetaData getParameterMetaData() throws SQLException {   return cstmt_.getParameterMetaData();   }   public void setNull(String parameterName, int sqlType) throws SQLException {   cstmt_.setNull(parameterName,sqlType);   }    public long getLong(String parameterName) throws SQLException {   return cstmt_.getLong(parameterName);   }   public boolean getBoolean(String parameterName) throws SQLException {   return cstmt_.getBoolean(parameterName);   }   public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {   cstmt_.registerOutParameter(parameterName,sqlType,typeName);   }   public void setBinaryStream(String parameterName, java.io.InputStream x, int length) throws SQLException {   cstmt_.setBinaryStream(parameterName,x,length);   }   public void setTimestamp(String parameterName, java.sql.Timestamp x, Calendar cal) throws SQLException {   cstmt_.setTimestamp(parameterName,x,cal);   }   public String getString(String parameterName) throws SQLException {   return cstmt_.getString(parameterName);   }   public void setLong(String parameterName, long x) throws SQLException {   cstmt_.setLong(parameterName,x);   }      public void setByte(String parameterName, byte x) throws SQLException {   cstmt_.setByte(parameterName,x);   }   public void setAsciiStream(String parameterName, java.io.InputStream x, int length) throws SQLException {   cstmt_.setAsciiStream(parameterName,x,length);   }   public void setURL(String parameterName, java.net.URL val) throws SQLException {   cstmt_.setURL(parameterName,val);   }   public java.sql.Time getTime(String parameterName, Calendar cal) throws SQLException {   return cstmt_.getTime(parameterName,cal);   }      public Blob getBlob(String parameterName) throws SQLException {   return cstmt_.getBlob(parameterName);   }   public void setTime(String parameterName, java.sql.Time x, Calendar cal) throws SQLException {   cstmt_.setTime(parameterName,x,cal);   }   public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {   cstmt_.setObject(parameterName,x,targetSqlType);   }   public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {   cstmt_.setObject(parameterName,x,targetSqlType,scale);   }   public void setCharacterStream(String parameterName, java.io.Reader reader, int length) throws SQLException {   cstmt_.setCharacterStream(parameterName,reader,length);   }   public float getFloat(String parameterName) throws SQLException {   return cstmt_.getFloat(parameterName);   }   public BigDecimal getBigDecimal(String parameterName) throws SQLException {   return cstmt_.getBigDecimal(parameterName);   }   public java.net.URL getURL(String parameterName) throws SQLException {   return cstmt_.getURL(parameterName);   }  @Override  public RowId getRowId(int parameterIndex) throws SQLException {    return null;  }  @Override  public RowId getRowId(String parameterName) throws SQLException {    return null;  }  @Override  public void setRowId(String parameterName, RowId x) throws SQLException {  }  @Override  public void setNString(String parameterName, String value) throws SQLException {  }  @Override  public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {  }  @Override  public void setNClob(String parameterName, NClob value) throws SQLException {  }  @Override  public void setClob(String parameterName, Reader reader) throws SQLException {  }  @Override  public void setClob(String parameterName, Reader reader, long length) throws SQLException {  }  @Override  public void setBlob(String parameterName, InputStream inputStream) throws SQLException {  }  @Override  public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {  }  @Override  public void setNClob(String parameterName, Reader reader) throws SQLException {  }  @Override  public <T> T getObject(int parameterIndex, Class<T> type) throws SQLException {    return null;  }  @Override  public <T> T getObject(String parameterName, Class<T> type) throws SQLException {    return null;  }  @Override  public void setNClob(String parameterName, Reader reader, long length) throws SQLException {  }  @Override  public NClob getNClob(int parameterIndex) throws SQLException {    return null;  }  @Override  public NClob getNClob(String parameterName) throws SQLException {    return null;  }  @Override  public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {  }  @Override  public SQLXML getSQLXML(int parameterIndex) throws SQLException {    return null;  }  @Override  public SQLXML getSQLXML(String parameterName) throws SQLException {    return null;  }  @Override  public String getNString(int parameterIndex) throws SQLException {    return null;  }  @Override  public String getNString(String parameterName) throws SQLException {    return null;  }  @Override  public Reader getNCharacterStream(int parameterIndex) throws SQLException {    return null;  }  @Override  public Reader getNCharacterStream(String parameterName) throws SQLException {    return null;  }  @Override  public Reader getCharacterStream(int parameterIndex) throws SQLException {    return null;  }  @Override  public Reader getCharacterStream(String parameterName) throws SQLException {    return null;  }  @Override  public void setBlob(String parameterName, Blob x) throws SQLException {  }  @Override  public void setClob(String parameterName, Clob x) throws SQLException {  }  @Override  public void setAsciiStream(String parameterName, InputStream x, long length) throws SQLException {  }  @Override  public void setBinaryStream(String parameterName, InputStream x, long length) throws SQLException {  }  @Override  public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {  }  @Override  public void setAsciiStream(String parameterName, InputStream x) throws SQLException {  }  @Override  public void setBinaryStream(String parameterName, InputStream x) throws SQLException {  }  @Override  public void setCharacterStream(String parameterName, Reader reader) throws SQLException {  }  @Override  public void setNCharacterStream(String parameterName, Reader value) throws SQLException {  }  public Object getObject(String parameterName) throws SQLException {   return cstmt_.getObject(parameterName);   }}