package com.emis.server;import com.emis.audit.emisAudit;import com.emis.business.emisBusinessCacheMgr;import com.emis.business.emisBusinessMgr;import com.emis.cipher.emisCipherMgr;import com.emis.classloader.emisLoaderMgr;import com.emis.db.emisDbMgr;import com.emis.db.emisPingDb;import com.emis.db.emisProp;import com.emis.db.emisSQLCache;import com.emis.file.emisDirectory;import com.emis.file.emisFileMgr;import com.emis.file.emisFile;import com.emis.mail.emisMailQueue;import com.emis.schedule.emisScheduleMgr;import com.emis.trace.emisError;import com.emis.trace.emisMessage;import com.emis.trace.emisTracer;import com.emis.user.emisCertFactory;import com.emis.util.emisLogger;import com.emis.util.emisUtil;import javax.servlet.ServletContext;import java.io.*;import java.nio.channels.FileLock;import java.rmi.RemoteException;import java.security.KeyFactory;import java.security.PublicKey;import java.security.Signature;import java.security.spec.X509EncodedKeySpec;import java.util.Date;import java.util.Enumeration;import java.util.HashMap;import java.util.Properties;/** * $Id$ * EMIS Server的實作類別. * * @author Robert * @version 2004/07/03 Jerry: 增加log.keepdays刪除幾天前的log檔. */public final class emisServerImpl // extends PortableRemoteObject    implements emisServer {    /* singleton */  //- private static final boolean isProfilerStarted = false;  /**   * logs\\*.* 保留Log檔最多時間, 第一位是天, 最後為Milliseconds   */  private static final long MAX_LOGS_KEEP_TIMES = 3 * 24 * 60 * 60 * 1000;  private Properties oProps_;  private HashMap oMgrObjects_ = new HashMap();  private ServletContext oContext_;  private String sServerName_;  private emisTracer oTrace_;  private int nStartUpErrorCount = 0;  private String sConfigFile_;  /**   * EMIS Server的實作.   *   * @param oContext   * @param sConfigFile   * @param eventBoot   * @throws Exception   */  protected emisServerImpl(ServletContext oContext, String sConfigFile,                           boolean eventBoot) throws Exception {    oContext_ = oContext;    sConfigFile_ = sConfigFile;    oProps_ = this.getServerConfiguration(sConfigFile);    // 將cfg檔內為 system.XXXX 格式的 XXXX 設定到 System.properties 中    Properties _oSetSysProp = emisUtil.subProperties("system.", oProps_);    Enumeration e = _oSetSysProp.keys();    while (e.hasMoreElements()) {      Object key = e.nextElement();      System.setProperty((String) key, (String) _oSetSysProp.get(key));    }    // optimize it , a third party analyze tool/*        if( "true".equalsIgnoreCase( oProps_.getProperty("run.optimizeit") ) )        {            OptimizeIt();        }*/    // the file system is initialized first    initFileSystem();    // 初始化多語系和 Exception Log 機制的子系統    oTrace_ = initTracer();    oTrace_.sysMsg(emisMessage.MSG_SVROBJ_TRACE_INIT);    oTrace_.sysMsg(emisMessage.MSG_SVROBJ_FILEMGR_INIT);/*        if (!verify(oProps_)) {          oTrace_.info("認證過期或失敗");          return;        }*/    if (oContext_.getAttribute(this.STR_EMIS_SERVER) != null) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_DUPLICATE, "emisServer");    }    oContext_.setAttribute(emisServer.STR_EMIS_SERVER, this);        /*         * SCHED Table 會用到 bind name         * 也就是此 Server 的 name 是甚麼         */    sServerName_ = oProps_.getProperty("server.bindname");    if ((sServerName_ == null) || "".equals(sServerName_)) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_SERVER_NO_BINDNAME);    }    /**     * 有些環境只有 IP , 沒有 DNS     */    String _sNameResolve = oProps_.getProperty(        "emis.client.resolvename", "BYHOSTNAME").toUpperCase();    if ("BYADDRESS".equals(_sNameResolve)) {      oContext_.setAttribute("emis.client.resolvename", new Boolean(false));    } else {      // true 為 by host name      oContext_.setAttribute("emis.client.resolvename", new Boolean(true));    }    //- 2004/07/04 Jerry: 將.cfg參數存入oContext_的attribute CFG_PROPS中.    oContext_.setAttribute("CFG_PROPS", oProps_);    // 刪除 garbage file(users/*.*, report_out/*.*, logs/*.*)    cleanTempFiles();    initCipher();  // 啟始認證機制    encryptDbPasswd();    initDatabaseMgr();  // 啟始資料庫管理程式    oTrace_.info("emisServerImpl.constructor init complete.");    // 因為在 2000 上 service 開機時,有可能資料庫服務還沒完成啟動, 所以要寫成 event 式的    // after database connection build, we call the server startup event    if (eventBoot) {      Thread startupThread = new Thread(new emisStartup(this, oContext_));      startupThread.setDaemon(true);      startupThread.start();    } else {      startup();    }  }  /**   * 啟動.   *   * @throws Exception   */  public void startup() throws Exception {    // 2015/12/09 Joe 解决Resin 3.0.25同一个Resin多开问题    if (isServerAlreadyRunning())      return;    // we have to create user Secret Key    initUserKey();    initAudit();    initSQLCache();  // 啟始SQLCache物件    initProp();    initCert();    initBusiness();    initBusinessCache();    initSchedule();    initDynamicClassLoader();    initMailQueue();    initPingDb();    if (nStartUpErrorCount == 0) {      oTrace_.sysMsg(emisMessage.MSG_SYS_STARTUP_COMPLETE);    } else {      oTrace_.sysMsg(emisMessage.MSG_SYS_STARTUP_NO_COMPLETE);    }    //Track+[23350] Jim.liu 2013/07/09 servletcontext 修改 ,在項目啟動之後將key 有 password 字樣的屬性刪除    filterSecurityKey();  }  //為配合server.jsp會列印出ServletContext 的屬性,有個CFG_PROPS 屬性,會看到 spool 的密碼,  //判斷 key 有 password 字樣, 就不存這個 key 值  private void filterSecurityKey() {    Enumeration keys = oProps_.keys();    String key = null;    while (keys.hasMoreElements()) {      key = (String) keys.nextElement();      if (key.toLowerCase().indexOf("password") >= 0) {        oProps_.remove(key);      }    }  }  private boolean verify(Properties props) {    try {      String sSignature = props.getProperty("SIGNATURE");      String sPublicKey = props.getProperty("SIGNPUBKEY");      String sUserLicense = props.getProperty("user.license", "10");      String sExpireDate = props.getProperty("expire", "0000000");      int nExpire = Integer.parseInt(sExpireDate);      int nCurrDate = Integer.parseInt(emisUtil.formatDateTime("%y%M%D", new Date()));      if (nExpire < nCurrDate)        return false;      String _data = sUserLicense + "EMIS" + sExpireDate;      byte[] data = _data.getBytes();      byte[] encoded = emisUtil.DecodeStrToByte(sPublicKey);      byte[] signature = emisUtil.DecodeStrToByte(sSignature);      X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encoded);      KeyFactory keyFactory = KeyFactory.getInstance("DSA");      PublicKey publicKey = keyFactory.generatePublic(pubKeySpec);      Signature dsa = Signature.getInstance("SHA1withDSA");      dsa.initVerify(publicKey);      dsa.update(data);      return dsa.verify(signature);    } catch (Exception e) {      System.out.println("emisServerImpl.verify: " + e.getMessage());    }    return false;  }  /**   * 啟始Tracer機制.   *   * @return emisTracer   * @throws Exception   */  public emisTracer initTracer() throws Exception {    return new emisTracer(oContext_, oProps_);  }  /**   * 啟始檔案系統.   *   * @throws Exception   */  private void initFileSystem() throws Exception {    new emisFileMgr(oContext_, oProps_);  }  /**   * 清除暫存檔.   *   * @throws Exception   */  private void cleanTempFiles() throws Exception {    // 系統啟始,先把 log 檔保留 20 個    // users/*.zip 清空    // report_out/*.png , *.dat 清空    emisFileMgr _oFileMgr = emisFileMgr.getInstance(oContext_);    emisDirectory _oRoot = _oFileMgr.getDirectory("root");    emisDirectory _oUsersDir = _oRoot.subDirectory("users");    Enumeration e = _oUsersDir.getDirList();    while (e.hasMoreElements()) {      emisDirectory _oSubDir = (emisDirectory) e.nextElement();      _oSubDir.cleanFile("*.ZIP");    }    emisDirectory _oReportDir = _oRoot.subDirectory("report_out");    e = _oReportDir.getDirList();    while (e.hasMoreElements()) {      emisDirectory _oSubDir = (emisDirectory) e.nextElement();      _oSubDir.cleanFile("*.PNG");      _oSubDir.cleanFile("*.TXT");      _oSubDir.cleanFile("*.RPT");    }    emisDirectory _oLogsDir = _oRoot.subDirectory("logs");    e = _oLogsDir.getFileList();    long now = (new Date()).getTime();    while (e.hasMoreElements()) {      emisFile _oFile = (emisFile) e.nextElement();      long _lLastModified = _oFile.lastModified();      if (now - _lLastModified >= getLogsKeepTimes()) {        _oFile.delete();        System.out.println("Deleting " + _oFile.getFullName());      }    }  }  /**   * 取出Log檔的保留MilliSeconds數.   *   * @return long   */  private long getLogsKeepTimes() {    String _sDays = oProps_.getProperty("log.keepdays");    long _lKeepTimes = MAX_LOGS_KEEP_TIMES;    if (_sDays != null && !"".equals(_sDays)) {      try {        _lKeepTimes = Integer.parseInt(_sDays);  // 天數        _lKeepTimes = _lKeepTimes * 24 * 60 * 60 * 1000;  // 變成Milliseconds      } catch (NumberFormatException e) {        ;      }    }    return _lKeepTimes;  }  /**   * 啟始認證機制.   *   * @throws Exception   */  private void initCipher() throws Exception {    try {      new emisCipherMgr(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_CIPHER_INIT);    } catch (Exception e) {      nStartUpErrorCount++;      oTrace_.sysError(this, emisError.ERR_SVROBJ_CIPHER_INIT, e.getMessage());    }  }  private void encryptDbPasswd() throws Exception {    emisCipherMgr _oMgr = emisCipherMgr.getInstance(oContext_);    if (!_oMgr.isDbNeedEncrypt())      return;    try {      oTrace_.info("encrypt db password");      emisCipherMgr _oCipher = emisCipherMgr.getInstance(this.oContext_);      int _nSpoolIdx = 0;      while (true) {        _nSpoolIdx++;        String _sPrefix = "spool." + _nSpoolIdx + ".";        Properties _oPool = emisUtil.subProperties(_sPrefix, oProps_);        if (_oPool == null) break;        if (_oPool.size() <= 0) break;        String _sPassword = _oPool.getProperty("password");        if (_sPassword != null) {          String _sEncrypt = _oPool.getProperty("encrypt");          if ("true".equalsIgnoreCase(_sEncrypt)) {            // it has been encrypted , so we decrypt it            _sPassword = _oCipher.deCipherDbData(_sPassword);            oProps_.setProperty(_sPrefix + "password", _sPassword);            continue;          }          // change the real file into encrypted but no need to change          // the value in the pProperties          _sPassword = _oCipher.cipherDbData(_sPassword);          if (_sEncrypt == null) {            changeSetup(_sPrefix, _sPassword, false);          } else {            changeSetup(_sPrefix, _sPassword, true);          }        }      }    } catch (Exception e) {      nStartUpErrorCount++;      oTrace_.sysError(this, emisError.ERR_SVROBJ_CIPHER_INIT, e.getMessage());    }  }  private void changeSetup(String sPrefix, String sPassword, boolean isModifyEncrypt)      throws IOException {    boolean isPasswdModified = false;    boolean isEncryptModified = false;    LineNumberReader lreader = new LineNumberReader(new FileReader(sConfigFile_));    File tmpF = new File(sConfigFile_ + "_");    try {      PrintWriter out = new PrintWriter(new FileWriter(tmpF));      try {        String _line = null;        String sUpperPrefix = sPrefix.toUpperCase();        String _sToken = sUpperPrefix + "PASSWORD=";        String _sEncToken = sUpperPrefix + "ENCRYPT=";        while ((_line = lreader.readLine()) != null) {          if (_line.trim().startsWith("#")) {  // a comment            out.println(_line);            continue;          }          String sUpperLine = _line.toUpperCase();          if (sUpperLine.indexOf(_sToken) != -1) {            if (!isModifyEncrypt) {              out.println(sPrefix + "encrypt=true");              isEncryptModified = true;            }            out.println(sPrefix + "password=" + sPassword);            isPasswdModified = true;            continue;          }          if (isModifyEncrypt) {            if (sUpperLine.indexOf(_sEncToken) != -1) {              out.println(sPrefix + "encrypt=true");              isEncryptModified = true;              continue;            }          }          out.println(_line);        }        out.flush();      } finally {        out.close();      }    } finally {      lreader.close();    }    if (!(isPasswdModified && isEncryptModified))      throw new IOException("Config file Modification error");    // copy the the into the original , and delete it    try {      FileInputStream in = new FileInputStream(tmpF);      try {        FileOutputStream out = new FileOutputStream(sConfigFile_);        try {          byte[] buf = new byte[1024];          int readed;          while ((readed = in.read(buf)) != -1) {            out.write(buf, 0, readed);          }        } finally {          out.close();        }      } finally {        in.close();      }    } finally {      tmpF.delete();      tmpF = null;    }  }  /**   * 啟始資料庫管理程式.   *   * @throws Exception   */  private void initDatabaseMgr() throws Exception {    try {      new emisDbMgr(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_DBMGR_INIT);    } catch (Exception e) {      nStartUpErrorCount++;      oTrace_.sysError(this, emisError.ERR_SVROBJ_DBMGR_INIT, e.getMessage());    }  }  private void initUserKey() throws Exception {    try {      emisCipherMgr _oMgr = emisCipherMgr.getInstance(oContext_);      _oMgr.genUserKey();    } catch (Exception e) {      nStartUpErrorCount++;      oTrace_.sysError(this, emisError.ERR_SVROBJ_CIPHER_INIT, e.getMessage());    }  }  /**   * 啟始SQLCache物件.   *   * @throws Exception   */  private void initSQLCache() throws Exception {    try {      new emisSQLCache(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_SQLCACHE_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_SQLCACHE_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  /**   * 啟始系統參數設定資料   */  private void initProp() throws Exception {    try {      new emisProp(oContext_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_PROP_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_PROP_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  private void initCert() throws Exception {    try {      emisCertFactory.createCert(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_CERT_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_CERT_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  /**   * 啟始資料庫管理程式.   *   * @throws Exception   */  private void initBusiness() throws Exception {    try {      new emisBusinessMgr(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_BUSINESS_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_BUSINESS_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  private void initBusinessCache() throws Exception {    try {      new emisBusinessCacheMgr(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_BUSINESSCACHE_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_BUSINESSCACHE_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  /**   * 啟動排程作業.   *   * @throws Exception   */  private void initSchedule() throws Exception {    try {      emisScheduleMgr _oMgr = new emisScheduleMgr(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_SCHEDULE_INIT);    } catch (Exception e) {      e.printStackTrace();      oTrace_.sysError(this, emisError.ERR_SVROBJ_SCHEDULE_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  /**   * 啟動動態Class Loader.   *   * @throws Exception   */  private void initDynamicClassLoader() throws Exception {    try {      new emisLoaderMgr(oContext_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_DYNAMICLOADER_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_DYNAMICLOADER_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  /**   * 啟始Mail queue.   *   * @throws Exception   */  private void initMailQueue() throws Exception {    try {      new emisMailQueue(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_MAILQUEUE_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_MAILQUEUE_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  private void initAudit() throws Exception {    try {      new emisAudit(oContext_, oProps_);      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_AUDIT_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_AUDIT_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  private void initPingDb() throws Exception {    try {      String sInterval = oProps_.getProperty("emis.pingdb.interval");      if ((sInterval == null) || "".equals(sInterval))        return;      emisPingDb pingDb = new emisPingDb(oContext_, Integer.parseInt(sInterval));      pingDb.setDaemon(true);      pingDb.start();      oTrace_.sysMsg(emisMessage.MSG_SVROBJ_PINGDB_INIT);    } catch (Exception e) {      oTrace_.sysError(this, emisError.ERR_SVROBJ_PINGDB_INIT, e.getMessage());      nStartUpErrorCount++;    }  }  /**   * 設定Tracer狀態.   *   * @param isTrace   * @throws Exception   */  public void enableDebug(boolean isTrace) throws Exception {    emisTracer.get(oContext_).setTrace(isTrace);  }  /**   * 取回Properties.   *   * @return   * @throws RemoteException   */  public Properties getProperties() throws RemoteException {    return oProps_;  }  /**   * 取回Manager物件.   *   * @param sMgrName   * @return   */  public Object getMgrObject(String sMgrName) {    return oMgrObjects_.get(sMgrName);  }  /**   * 傳回Server名稱.   *   * @return   */  public String getServerName() {    return sServerName_;  }  /**   * 由傳入的.cfg取出所有Property.   *   * @param sConfigFile 如eros.cfg, tai.cfg   * @return Properties   * @throws IOException   */  private Properties getServerConfiguration(String sConfigFile) throws IOException {    Properties _oProp = null;    InputStream _oIn = null;    try {      _oIn = new FileInputStream(sConfigFile);      _oProp = new Properties();      _oProp.load(_oIn);      return _oProp;    } catch (FileNotFoundException e) {      oContext_.log("emisServerImpl: Config file is missing: " + sConfigFile);      throw new IOException("emisServerImpl: Can't find EMIS config file:" + sConfigFile);    } finally {      if (_oIn != null) _oIn.close();    }  }  private Thread releaseLock = null;  public void shutdown() throws Exception {    if (releaseLock != null) {      Runtime.getRuntime().removeShutdownHook(releaseLock);      releaseLock.start();      releaseLock = null;    }  }  /**   * 用于锁定文件，实现程序单开（即不允许多个实例）   *   * @param lockFile   * @return   */  private boolean lockInstance(final String lockFile) {    try {      final File file = new File(lockFile);      final RandomAccessFile randomAccessFile = new RandomAccessFile(          file, "rw");      final FileLock fileLock = randomAccessFile.getChannel().tryLock();      if (fileLock != null) {        releaseLock = new Thread() {          public void run() {            try {              fileLock.release();              randomAccessFile.close();              file.delete();              oContext_.log("EMIS Server shutdown......");            } catch (Exception e) {              oContext_.log("Unable to remove lock file: " + lockFile, e);            }          }        };        releaseLock.setName("Release Lock Server - " + System.currentTimeMillis());        Runtime.getRuntime().addShutdownHook(releaseLock);        return true;      }    } catch (Exception e) {      oContext_.log("Unable to create and/or lock file: " + lockFile, e);    }    return false;  }  /**   * 服务器是否已开启   *   * @return   */  private boolean isServerAlreadyRunning() {    if ("false".equalsIgnoreCase(oProps_.getProperty("server.lockServer"))) return false;    String sRoot = oProps_.getProperty("documentroot");    if (lockInstance(sRoot + "/.lockServer")) {      oContext_.log("EMIS Server starting......");      return false;    } else {      oContext_.log("Another EMIS Server is running, can not startup a new instance......");      return true;    }  }}