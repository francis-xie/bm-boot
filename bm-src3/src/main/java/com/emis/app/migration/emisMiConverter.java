package com.emis.app.migration;import com.emis.app.migration.action.emisMiAction;import com.emis.util.*;import java.text.DecimalFormat;public class emisMiConverter {	private emisMiField srcField[] = null;	private emisMiField tarField[] = null;	// emisMiConfig miConfig_;	String[] result;	int session = 0;		int ttlTargetFldLen = 0;	public void setSrcField(emisMiField[] fields) {		srcField = fields;	}	public void setTarField(emisMiField[] tarField) {		this.tarField = tarField;		int resultLen = tarField.length;		int i;		for (i = tarField.length - 1; (tarField[i].getLength() == 0) && i >= 0; i--) {			resultLen--;		}		ttlTargetFldLen = 0;		for (i = 0; i<tarField.length; i++) {			ttlTargetFldLen += 	tarField[i].getLength();		}		result = new String[resultLen];	}		public int getTotalTargetFieldLen() {		return ttlTargetFldLen;	}	/*	 * 	 * public emisMiConverter(emisMiConfig miConfig_) {	 * 	 * this.miConfig_ = miConfig_;	 *  }	 * 	 */	String paddingString(char c, int n) {		char[] cArray = new char[n];		for (int i = 0; i < n; i++) {			cArray[i] = c;		}		return new String(cArray);	}	String[] convertSrcData(String[] data) {		int len = srcField.length;		for (int i = 0; i < len; i++) {			emisMiField fld = srcField[i];			boolean trim = (fld.getTrim() == emisMiField.TRIM_TRUE);			if (trim) {				String s = data[i].trim();				int sLen = s.length();				if (sLen < fld.getLength()) {					// char padding = fld.getPadding();					/**					 * 					 * if (fld.isAlignRight()) {					 * 					 * s = paddingString(padding, fld.getLength() - sLen) + s;					 *  } else {					 * 					 * s = s + paddingString(padding, fld.getLength() - sLen);					 *  }					 * 					 */					data[i] = s;				}			}		}		return data;	}	public String[] convert(String[] data) throws Exception {		data = convertSrcData(data);		int len = tarField.length;		for (int i = 0; i < len; i++) {			emisMiField fld = tarField[i];			String s = fld.getValue();			int srcIndex = fld.getSrc();			if (s == null && srcIndex >= 0) {				s = data[srcIndex];			}			emisMiAction action;			if ((action = fld.getAction()) != null) {				int[] actionParams = fld.getActionParam1();				String[] params;				if (actionParams != null) {					params = new String[actionParams.length];					for (int j = 0; j < params.length; j++)						params[j] = data[actionParams[j]];				} else {					params = new String[] { s };				}				// action.setSourceData(data);				// action.setTargetData(result);				// 尚未決定是否開放				s = action.act(params, fld.getActionParam2());			}			int fLen = fld.getLength();			if (fLen == 0) // && (s == null || s.length()==0))				continue;			if (s == null)				s = "";						if (fld.getType().equalsIgnoreCase("Dec") && s.length() > 0) {				DecimalFormat formatter = fld.getFormatter();				s = formatter.format(Double.parseDouble(s));			}						boolean trim = (fld.getTrim() == emisMiField.TRIM_TRUE);			if (trim) {				s = s.trim();			}						if (fld.getType().equalsIgnoreCase("DATE") && s.length() == 0) {				result[i] = s;				continue;			}			byte[] bytes = s.getBytes();			int sLen = bytes.length;			char padding = fld.getPadding();			/**			 * wing 20100129 修改對齊方式,調用emisUTF8StringUtil函數實現			 */			if (sLen > fLen) {				if (fld.isAlignRight()) {					result[i] = emisUTF8StringUtil.subStringB(s, 0, fLen);					// result[i] = new String(bytes, sLen - fLen, fLen);				} else {					result[i] = emisUTF8StringUtil.subStringB(s, 0, fLen);					// result[i] = new String(bytes, 0, fLen);				}			} else if (sLen < fLen && (padding != ' ' || !trim)) {				if (fld.isAutoSize()) {					result[i] = sLen == 0 ? " " : s + " ";				} else {					if (fld.isAlignRight()) {						String s1 = emisUTF8StringUtil.align(s, fLen, emisUTF8StringUtil.A_RIGHT, padding);						// paddingString(padding, fLen - sLen) + s;						result[i] = s1;					} else {						String s1 = emisUTF8StringUtil.align(s, fLen, emisUTF8StringUtil.A_LEFT, padding);						// String s1 = s + paddingString(padding, fLen - sLen);						result[i] = s1;					}				}			} else {				if (fld.isAutoSize()) {					result[i] = sLen == 0 ? " " : s + " ";				} else {					if (fld.isAlignRight()) {						String s1 = emisUTF8StringUtil.align(s, fLen, emisUTF8StringUtil.A_RIGHT, padding);						// paddingString(padding, fLen - sLen) + s;						result[i] = s1;					} else {						result[i] = emisUTF8StringUtil.align(s, fLen, emisUTF8StringUtil.A_LEFT);// s;					}				}			}		}		return result;	}	public static void main	(String[] args) {		emisMiField[] data = new emisMiField[21];		int i = 0;		data[i++] = new emisMiField(0, 20);		data[i++] = new emisMiField(1, 50);		data[i++] = new emisMiField(2, 13);		data[i++] = new emisMiField(-1, 10);		data[i++] = new emisMiField(3, 8);		data[i] = new emisMiField(4, 11);		data[i++].setType("Dec");		data[i] = new emisMiField(5, 11);		data[i++].setType("Dec");		data[i] = new emisMiField(6, 11);		data[i++].setType("Dec");		data[i] = new emisMiField(7, 11);		data[i++].setType("Dec");		data[i] = new emisMiField(8, 11);		data[i++].setType("Dec");		data[i] = new emisMiField(9, 11);		data[i++].setType("Dec");		data[i++] = new emisMiField(10, 1);		data[i++] = new emisMiField(-1, 1);		data[i++] = new emisMiField(11, 4);		data[i++] = new emisMiField(-1, 2);		data[i++] = new emisMiField(12, 2);		data[i++] = new emisMiField(13, 1);		data[i++] = new emisMiField(14, 3);		data[i++] = new emisMiField(15, 3);		data[i++] = new emisMiField(16, 3);		data[i++] = new emisMiField(17, 1);		emisMiConverter c = new emisMiConverter();		c.setTarField(data);		String[] srcdata = { "R6202-RD-C75", "光纖亮麗", "1234567890ABC", "R6202",				"1000",				"1000", "1000", "1000", "1000", "1000", "1", "件", "00", "0",				"001", "002",				"003", "1" };		String tardata[] = new String[0];		try {			tardata = c.convert(srcdata);		} catch (Exception e) {			// Log here; //To change body of catch statement use Options | File			// Templates.		}		for (i = 0; i < tardata.length; i++) {			System.out.print(tardata[i]);		}		System.out.println("");	}}