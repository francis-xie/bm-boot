package com.emis.db;import com.emis.trace.emisError;import com.emis.trace.emisTracer;import javax.servlet.ServletContext;import java.util.HashMap;/** * $Id$ * <p> * 為了方便取得在資料庫 EMISPROP table ?? 的 Key 和 Value 的 Mapping. * * @author Robert * @version 2004/08/09 Jerry: 多加一個上層. */public class emisProp extends emisAbstractCacheTable {  /**   * 識別字串   */  public static final String STR_EMIS_PROP = "com.emis.db.emisprop";  private HashMap hmProperties_;  //  = new HashMap();  //- private ServletContext application_;  /**   * Constructor. 於emisAbstractCacheTable建立物件.   *   * @param application   * @throws Exception   */  public emisProp(ServletContext application) throws Exception {    super(application, STR_EMIS_PROP);  }  /**   * 第一次啟動後使用. 重新載入.   *   * @throws Exception   */  protected synchronized void reload() throws Exception {    hmProperties_ = new HashMap();    emisDb oDb = emisDb.getInstance(oContext_);    try {      oDb.setDescription("system: get EMIS Properties");      oDb.executeQuery("SELECT * FROM EMISPROP");      while (oDb.next()) {        String _sName = oDb.getString("NAME");        String _sValue = oDb.getString("VALUE");        hmProperties_.put(_sName, _sValue);      }    } catch (Exception e) {      //System.out.println("reload:" + e.getMessage());      emisTracer.get(oContext_).sysError(this, emisError.ERR_SVROBJ_PROP_RESET,          e.getMessage());    } finally {      oDb.close();    }  }  /**   * 取出存於ServletContext內的Instance.   *   * @param oContext   * @return   * @throws Exception   */  public static emisProp getInstance(ServletContext oContext) throws Exception {    emisProp oProp = (emisProp) oContext.getAttribute(STR_EMIS_PROP);    if (oProp == null) {      emisTracer.get(oContext).sysError(null, emisError.ERR_SVROBJ_NOT_BIND, "emisProp");    }    return oProp;  }  /**   * 範例: emisProp.getInstance(application).get("COMPANY");   *   * @param sName   * @return   * @throws Exception   */  public synchronized String get(String sName) throws Exception {    String _sValue = (String) hmProperties_.get(sName);    if (_sValue == null) _sValue = "";    return _sValue;  }  /**   * 取屬性值.   *   * @param sName   * @param sDefault   * @return   * @throws Exception   */  public synchronized String get(String sName, String sDefault) throws Exception {    String _sValue = (String) hmProperties_.get(sName);    if ((_sValue == null) || "".equals(_sValue)) {      return sDefault;    }    return _sValue;  }  /**   * 由emisProp資料表中取得 EPOS_DATETYPE屬性 若為'US'或'Y'則代表日期為西元制   * <p>   * * @return   true : 西元制  false:民國制   *   * @throws Exception   */  public boolean isAD() throws Exception {    return true;    /*boolean _isAD = false;    String _sDateType = this.get("EPOS_DATETYPE");    if (_sDateType != null && ("Y".equalsIgnoreCase(_sDateType) ||        "US".equalsIgnoreCase(_sDateType))) {      _isAD = true;    }    return _isAD;*/  }}