package com.emis.db.psql;import com.emis.spool.emisPoolable;import com.emis.trace.emisTracer;import javax.servlet.ServletContext;import java.sql.DriverManager;import java.sql.SQLException;import java.util.Properties;/** *   psql 的 transfer mode 為 0 (TRANSFER_NONE) */public class emisDbConnectorPsqlImpl extends com.emis.db.emisDbConnectorJDBC20{    String _url ;    String _user;    String _password;    public emisDbConnectorPsqlImpl(ServletContext oContext,Properties props) throws Exception    {        super(oContext,props);    }    private java.sql.Driver pDriver ;    protected void createSource(Properties props) throws java.lang.Exception    {        pDriver = (java.sql.Driver) Class.forName("org.postgresql.Driver").newInstance();        _url = (String) props.get("url");        _user = (String) props.getProperty("username","");        _password = (String) props.getProperty("password","");        String _charset =  (String) props.get("encoding");        if( _charset == null ) _charset = "ISO8859_1";        sDbCharset_ = _charset;    }    public emisPoolable generateRealPooledObject(int nTimeOut) throws Exception    {        try {            DriverManager.setLoginTimeout(nTimeOut);            java.sql.Connection conn = DriverManager.getConnection(_url,_user,_password);            return new emisConnectProxyPsql(oContext_,conn,this);        } catch(Exception ignore) {            emisTracer.get(oContext_).warning(this,ignore);            throw ignore;        }    }    public String getSequenceNumber(java.sql.Connection oConn,String sSequenceName,boolean checkAutoDrop,String sDropCondition,String sFormat) throws SQLException    {        return "0";    }    public String getStoreSequence(java.sql.Connection oConn,String sSequenceName,String sSNO,String sDropCondition,String sFormat) throws SQLException    {      return "0";    }/**    public emisMenuPermission getMenuPermission(java.sql.Connection oConn , String sUserId,String sGroup,String sStoreNo) throws SQLException    {        PreparedStatement pstmt = oConn.prepareStatement(          "select distinct u.keys,u.BTNADD,u.BTNUPD,u.BTNDEL,u.BTNRPT from Userrights u, Menus m where " +          "((u.USERID=? and (u.S_NO is null or u.S_NO=?)) or u.USERGROUPS=?) "+          "and u.RIGHTS='Y' "+          "and (u.KEYS=m.KEYS or m.MENU_TYPE is null) order by u.keys ");        try {            pstmt.setString(1,sUserId);            pstmt.setString(2,(sStoreNo == null) ? "":sStoreNo);            pstmt.setString(3,(sGroup == null) ? "":sGroup);            java.sql.ResultSet rs = pstmt.executeQuery();            return new emisMenuPermission(rs);        } finally {            pstmt.close();        }    }*/    public void expireSQLCache(java.sql.Connection oConn,String sSQLName) throws SQLException    {    }/*    public String getCreateTempTableScript(String sTableName,String [] sColumns,int [] nSQLType,String [] nSize)    {        return null;    }    public String getDropTableScript(String sTableName)    {        return "DROP TABLE "+ sTableName ;    }*/    public String errToMsg( SQLException e )    {        if( e == null ) return null;        return e.getMessage();    }    /**     * 是否是 PrimaryKey Exception     */    public boolean isPKError( SQLException e)    {      return false;    }    public String dualTestSQL()    {      return "SELECT 1";    }  /**   * 获取数库的类型(如一种驱动可面向多种不同数据请写不同的Impl)   * @return   */  public String getDBType() {    return "postgre";  }}