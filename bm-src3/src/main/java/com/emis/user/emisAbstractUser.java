/* $Id: emisAbstractUser.java 436 2015-07-30 09:30:38Z andy.he $ * * Copyright (c) 2004 EMIS Corp. All Rights Reserved. */package com.emis.user;import com.emis.audit.emisAudit;import com.emis.db.emisDb;import javax.servlet.ServletContext;import javax.servlet.http.HttpSessionBindingEvent;import java.util.HashMap;import java.util.Properties;/** * User物件大部份功能的實作處. 外部應用程式須使用其子類別<code>emisUserImpl</code>. * * @author Robert * @version 2002 * @version 2004/08/25 Jerry: add comments */abstract public class emisAbstractUser implements emisUser, java.io.Serializable {  /**   * HashMap.   */  protected HashMap oHash_ = new HashMap();  /**   * Users table欄位轉存成 oProp_.   */  protected Properties oProp_ = new Properties();  /**   * emisUserImpl constructor 存來的ServletContext.   */  protected ServletContext oContext_;  /**   * Session ID.   */  protected String sUniqueID_;  /**   * 功能表權限.   */  protected emisMenuPermission oMenuPermission_;  /**   * Constructor.   *   * @param oContext servlet conetxt   * @param sSessionId session id   */  public emisAbstractUser(ServletContext oContext, String sSessionId) {    oContext_ = oContext;    sUniqueID_ = sSessionId;  }  /**   * 由emisUserImpl實作.   *   * @return Properties   * @throws Exception   */  abstract public Properties getUserStoreInfo() throws Exception;  /**   * 由emisUserImpl實作.   *   * @param sUserId User ID   * @return Properties   * @throws Exception   */  abstract public Properties getUserInfo(String sUserId) throws Exception;  /**   * 由下層實作.   * @return user type   */  abstract public int getUserType();  /**   * 傳回emisUserImpl傳來的Session id.   *   * @return Session ID   */  public String getUniqueID() {    return sUniqueID_;  }  /**   * Session event.   *   * @param event   */  public void valueBound(HttpSessionBindingEvent event) {    try {      emisCert _oCert = emisCertFactory.getCertificate(oContext_);      emisUserMonitor _oMonitor = _oCert.getUserMonitor();      _oMonitor.putSessionObject(event.getSession(), this);      emisAudit.getInstance(oContext_).audit(this, "LOGIN", "LOGIN");    } catch (Exception e) {      System.err.println("emisAbstractUser.valueBound: " + e.getMessage());    }  }  /**   * Session event.   *   * @param event   */  public void valueUnbound(HttpSessionBindingEvent event) {    try {      emisCert _oCert = emisCertFactory.getCertificate(oContext_);      emisUserMonitor _oMonitor = _oCert.getUserMonitor();      _oMonitor.removeSession(event.getSession());      emisAudit.getInstance(oContext_).audit(this, "LOGOUT", "LOGOUT");    } catch (Exception e) {      System.err.println("emisAbstractUser.valueUnbound: " + e.getMessage());    }  }  /**   * 變更密碼.   *   * @param sNewPasswd   * @param sOldPasswd   * @param sConfirmPasswd   * @return   */  public boolean setPasswd(String sNewPasswd, String sOldPasswd, String sConfirmPasswd) {    return false;  }  /**   * 設屬性.   *   * @param oKey attribute key   * @param oObj Object   */  public void setAttribute(Object oKey, Object oObj) {    oHash_.put(oKey, oObj);  }  /**   * 取屬性.   *   * @param oKey   * @return Object   */  public Object getAttribute(Object oKey) {    return oHash_.get(oKey);  }  /**   * 移除屬性.   *   * @param oKey   * @return Object   */  public Object removeAttribute(Object oKey) {    return oHash_.remove(oKey);  }  /**   * 清空屬性.   */  public void clearAttribute() {    oHash_.clear();  }  /**   * 是否要除錯.   *   * @param isDebug   */  public void setDebug(boolean isDebug) {    if (isDebug) {      this.setAttribute("_DEBUG_", "true");    } else {      this.setAttribute("_DEBUG_", "false");    }  }  /**   * 取出除錯狀態.   *   * @return is in debug mode?   */  public boolean isDebug() {    String _isDebug = (String) this.getAttribute("_DEBUG_");    if ("true".equalsIgnoreCase(_isDebug)) {      return true;    }    return false;  }  /**   * 取屬性.   *   * @param sPropName Specified property   * @return Value   */  public String getProperty(String sPropName) {    if (sPropName != null) {      sPropName = sPropName.toUpperCase();      String _sStr = (String) oProp_.get(sPropName);      if (_sStr != null) return _sStr;      return "";    }    return "";  }  /**   * 傳回使用者代號.   *   * @return user ID   */  public String getID() {    return getProperty("USERID");  }  /**   * 傳回使用者名稱.   *   * @return User name   */  public String getName() {    return getProperty("USERNAME");  }  /**   * 傳回使用者群組.   *   * @return group   */  public String getGroups() {    return getProperty("USERGROUPS");  }  /**   * 傳回門市代號.   *   * @return Store Number   */  public String getSNo() {    return getProperty("S_NO");  }  /**   * 傳回使用者代號.   *   * @return Company no   */  public String getCompanyNo() {    return getProperty("COMPANY_NO");  }  /** 傳回使用者類別   public String getUserType() {   return getProperty("USER_TYPE");   }   */  /**   * 傳回功能權限.   *   * @param sKey sample: "PART"   * @return emisPermission (ArrayList)   */  public emisPermission getMenuPermission(String sKey) {    return oMenuPermission_.getPermission(sKey);  }  /**   * 被授權的使用者嗎?.   *   * @param sPasswd   * @return is auhorized?   */  public boolean isAuthorized(String sPasswd) {    String _sPasswd = getProperty("PASSWD");    if (sPasswd == null)      sPasswd = "";    try {//        sPasswd = emisUtil.digest(sPasswd);      if (sPasswd.equals(_sPasswd))        return true;      return false;    } catch (Exception e) {      return false;    }  }  /**   * 目的:  使用者是否能看成本.   */  public String getIs_amt() {    return getProperty("IS_AMT");  }  /**   * 將資料表的欄位值轉成Properties值.   *   * @param oDb   * @param prop   * @throws Exception   */  protected void dbToProperty(emisDb oDb, Properties prop) throws Exception {    int nColumnCnt = oDb.getColumnCount();    String sTmp = null;    for (int i = 1; i <= nColumnCnt; i++) {      sTmp = oDb.getString(i);      if (sTmp == null) sTmp = "";      prop.put(oDb.getColumnName(i).toUpperCase(), sTmp);    }  }}