/* $Header: /repository/src3/src/com/emis/db/emisAbstractProxy.java,v 1.1.1.1 2005/10/14 12:41:58 andy Exp $ * * 2004/05/25 Jerry: 建立本物件時將建立時間存到變數, 供emisDbMonitor查詢用 */package com.emis.db;import com.emis.spool.emisComplexSpool;import com.emis.spool.emisPoolObject;import com.emis.util.emisUtil;import javax.servlet.ServletContext;/** *  emisConnectProxy interface 的 implementation *  的 super class (底層), extend emisPoolObject, *  所以可以讓 emisComplexSpool當做 Poolable Object 使用 *  @see com.emis.spool.emisComplexSpool *  @see com.emis.spool.emisPoolObject */abstract public class emisAbstractProxy extends emisPoolObject implements emisConnectProxy {  /**   * 此 oConnect_ 是讓下一層的 implementation 用的   */  protected emisComplexSpool oSpool_;  protected boolean hasFatalError_ = false;  protected Exception fatalError_;  protected ServletContext oContext_;  private String sDescription_;  protected emisStatementWrapper oStmt_;  protected String sTime_; // Connection 建立時間  private emisProxyDesc oDesc_;  public emisAbstractProxy(ServletContext oContext, Object poolObject, emisComplexSpool oSpool) {    super(poolObject);    oContext_ = oContext;    oSpool_ = oSpool;    sTime_ = emisUtil.formatDateTime("%y/%M/%D %h:%m:%s", emisUtil.now());  }  public String getDescription() {    return sDescription_;  }  public void setDescription(String sStr) {    sDescription_ = sStr;  }  public void setExecutingStatement(emisStatementWrapper stmt) {    oStmt_ = stmt;    // robert 2011/11/25 , fix orphan issue, we need to update the lastTouch time    touch();  }  /**   public void setStatementFinish()   {   oStmt_ = null;   }   */  public emisStatementWrapper getExecutingStatement() {    return oStmt_;  }  /**   * 傳回可以描述目前 Proxy 狀態的 emisProxyDesc 物件   * @see emisProxyDesc   */  public emisProxyDesc getDescriptor() {    oDesc_ = new emisProxyDesc(this.getPooledObject().toString(), sDescription_, oStmt_, sTime_, this.getPid() );    return oDesc_;  }  public Exception getFatalError() {    return fatalError_;  }  public void setFatalError() {    hasFatalError_ = true;  }    public void touch() {    setTime(System.currentTimeMillis());  }  abstract public boolean hasFatalError();  abstract public void freeResource();}