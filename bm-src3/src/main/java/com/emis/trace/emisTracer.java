package com.emis.trace;import com.emis.file.emisFileMgr;import com.emis.util.emisUtil;import javax.servlet.ServletContext;import java.io.PrintWriter;import java.sql.SQLException;import java.util.Calendar;import java.util.Properties;import java.util.ResourceBundle;/** * $Id$ * 用來記錄與追蹤目前webapp的各式狀態; * 共有四種 level, 請在系統啟始設定檔(/resin/xxx.cfg) 中設定 * log.level=info,warning,error,debug */public final class emisTracer {  public static final String STR_EMIS_TRACER = "com.emis.trace";  private Properties oProps_;  private emisTracer oTracer_;  private boolean needTrace_ = false;  private PrintWriter oOut_;  private StringBuffer oBuf_ = new StringBuffer();  private ResourceBundle oSystemResource_;  private ServletContext oContext_;  private boolean isInfo_ = false;  private boolean isWarning_ = false;  private boolean isError_ = false;  private boolean isDebug_ = false;  public emisTracer(ServletContext oContext, Properties oProps) throws Exception {    oContext_ = oContext;    oProps_ = oProps;    if (oContext_.getAttribute(this.STR_EMIS_TRACER) != null) {      throw new Exception(this + " already registered in ServletContext ");    }    oContext_.setAttribute(this.STR_EMIS_TRACER, this);    // load resource string    try {      oSystemResource_ = emisUtil.getResourceBundle("com.emis.server.message.Messages");    } catch (Exception ignore) {      System.err.println(ignore);    }    String _isEnableLog = oProps.getProperty("log.enabled");    if (_isEnableLog != null) {      if ("true".equalsIgnoreCase(_isEnableLog)) {        needTrace_ = true;      }    }    String _sLevel = oProps.getProperty("log.level");    if (_sLevel != null) {      _sLevel = _sLevel.toLowerCase();      if (_sLevel.indexOf("info") != -1)        isInfo_ = true;      if (_sLevel.indexOf("warn") != -1)        isWarning_ = true;      if (_sLevel.indexOf("err") != -1)        isError_ = true;      if (_sLevel.indexOf("debug") != -1)        isDebug_ = true;    }    if (!needTrace_) return;    _openLog();    needTrace_ = true;    return;  } // emisTracer()  /**   * 由webapp物件中取得emisTracer物件   */  public static emisTracer get(ServletContext oContext) {    return (emisTracer) oContext.getAttribute(emisTracer.STR_EMIS_TRACER);  }  public ResourceBundle getResource() {    return oSystemResource_;  }  /**   * 若log 沒有開, sysMsg 會寫到 stdout   * 若有,會寫到 log   * 和 log Level 沒有關係   */  public void sysMsg(int nMsgId) {    if (oSystemResource_ == null) return;    String _sMessage = this.oSystemResource_.getString("MSG" + nMsgId);    if (_sMessage == null) _sMessage = "undefined error";    if (needTrace_) {      oOut_.println(_sMessage);    } else {      System.out.println(_sMessage);    }  }  /**   * 由com.emis.server.message.Messages_zh_TW.properties取出訊息   */  public String getMsg(int nMsgId) {    if (oSystemResource_ == null) return "";    String _sMessage = this.oSystemResource_.getString("MSG" + nMsgId);    if (_sMessage == null) _sMessage = "";    return _sMessage;  }  /**   * error level >= 0   *   * @param oObj          可以直接傳 this   * @param nErrorNum   * @param additionalMsg   * @throws Exception   */  public synchronized void sysError(Object oObj, int nErrorNum, String additionalMsg) throws Exception {    String _sKey = "ERR" + Integer.toString(nErrorNum);    if (oSystemResource_ != null) {      String _sMessage = this.oSystemResource_.getString(_sKey);      if (_sMessage == null) {        _sMessage = "undefined Error";      }      if (additionalMsg == null)        error(oObj, new emisException(nErrorNum, _sMessage));      else        error(oObj, new emisException(nErrorNum, _sMessage + ":" + additionalMsg));    } else {      error(this, new emisException(-1, "missing system resource bundle file"));    }  } // sysError  public synchronized void sysError(Object oObj, int nErrorNum) throws Exception {    sysError(oObj, nErrorNum, null);  }  /**   * 輸出錯誤訊息   */  private synchronized void error(Object oObj, Exception e) throws Exception {    if (needTrace_ && isError_) {      if (oObj != null) {        oOut_.println("[" + oObj.getClass().getName() + "]");      }      if (e instanceof SQLException) {        SQLException oSQLExcept = (SQLException) e;        int _nErrCode = oSQLExcept.getErrorCode();        String _sSQLState = oSQLExcept.getSQLState();        oOut_.println("SQL Error Code=" + _nErrCode);        oOut_.println("SQL State=" + _sSQLState);      }      reportException(e);    }    throw e;  }  /*-------------------------WARNING--------------------------*/  /**   * 輸出警告訊息   */  public synchronized void warning(Object oObj, String sMsg) {    if (!needTrace_) return;    if (!isWarning_) return;    String _sWarning = _formatMsg(oObj, sMsg);    oOut_.println(_sWarning);  }  public synchronized void warning(String sMsg) {    warning(null, sMsg);  }  public synchronized void warning(Object oObj, Exception e) {    if (!needTrace_) return;    if (!isWarning_) return;    String _sWarning = _formatMsg(oObj, e.getMessage());    oOut_.println(_sWarning);    reportException(e);  }  /*-------------------------INFO--------------------------*/  /**   * 輸出一般訊息   */  public synchronized void info(Object oObj, String sMsg) {    if (!needTrace_) return;    if (!isInfo_) return;    String _sInfo = _formatMsg(oObj, sMsg);    oOut_.println(_sInfo);  }  public synchronized void info(String sMsg) {    info(null, sMsg);  }  /*-------------------------debug----------------------------*/  /**   * 格式化輸出除錯訊息; 會帶出發出訊息之類別名稱.   * 2002/07/29 Jerry added   */  public synchronized void debug(Object obj, String sStr) {    if (!needTrace_) return;    if (!isDebug_) return;    if (sStr != null) {      oOut_.println(_formatMsg(obj, sStr));    }  }  /**   * 輸出除錯訊息   */  public synchronized void debug(String sStr) {    debug(null, sStr);  }  /**   * 輸出例外Stack   */  public synchronized void reportException(Exception e) {    if (e == null) return;    oOut_.println(emisUtil.getStackTrace(e));    oOut_.println("---------------------------------------");  }  /**   * close the logfile   * and open another logfile   */  public synchronized void reset() throws Exception {    setTrace(false);    setTrace(true);  }  /**   * 本webapp能追蹤訊息記錄否?   */  public synchronized boolean isTraceEnabled() {    return needTrace_;  }  /**   * 設定追蹤的狀態為true或false   */  public synchronized void setTrace(boolean isTrace) throws Exception {    if (isTrace) // 打開 trace    {      if (needTrace_) return;      _openLog();      needTrace_ = true;    } else { // 關掉 trace      needTrace_ = false;      oOut_.flush();      if (oOut_ != null) {        try {          oOut_.close();        } catch (Exception ignore) {        } finally {          oOut_ = null;        }      }    }  }  /**   * 傳回webapp的系統記錄檔名   */  private String _newLogFileName() {    Calendar _oCalendar = emisUtil.getLocaleCalendar();    String _sMonth = emisUtil.getMonthS(_oCalendar);    String _sDate = emisUtil.getDateS(_oCalendar);    String _sHour = emisUtil.getHourS(_oCalendar);    String _sMin = emisUtil.getMinS(_oCalendar);    return "emisServer." + _sMonth + _sDate + "_" + _sHour + _sMin + ".log";  }  /**   * 開啟系統記錄檔   */  private void _openLog() throws Exception {    String _sLogFileName = _newLogFileName();    //如果当前服务与其他AP共用wwwroot,则log输出到单独的文件中。    if (oProps_ != null && "false".equalsIgnoreCase(oProps_.getProperty("server.lockServer"))) {      _sLogFileName = oProps_.getProperty("server.bindname") + "." + _sLogFileName;    }    oOut_ = emisFileMgr.getInstance(oContext_).getWriter("logs", _sLogFileName, "f");  }  /**   * 格式化訊息的輸出格式   * <p>   * 2004/02/06 Jerry: 所有輸出都先帶日期時間.   */  private String _formatMsg(Object oObj, String sMsg) {    oBuf_.setLength(0);    oBuf_.append("[" + emisUtil.formatDateTime("%y/%M/%D %h:%m:%s", emisUtil.now())).append("] ");    if (oObj != null) {      String _sClassName = oObj.getClass().getName();  // instance's class name      oBuf_.append(_sClassName).append(" ");    }    if (sMsg != null) oBuf_.append(sMsg);    String _sStr = oBuf_.toString();    return _sStr;  }  /**   * 取得是否為 Debug 模式   *   * @return   */  public boolean isDebug_() {    return isDebug_;  }}