package com.emis.db;import com.emis.manager.emisAbstractMgr;import com.emis.trace.emisError;import com.emis.trace.emisTracer;import com.emis.util.emisUtil;import javax.servlet.ServletContext;import java.lang.reflect.Constructor;import java.util.*;import java.sql.SQLException;/** *  emisDbMgr 管理不同的 database Connection Spool (emisDbConnector) *  emisDbConnector 是一個 interface, *  每一個 emisDbConnector 各有一個 name (abstract database name) *  他的實作可以是 Oracle 的 (com.emis.db.oracle.emisDbConnectorOrclImpl), *  可以是 MSSql 或 Pervasive , 都是由系統設定檔來指定 *  所以系統可以同時連兩個以上不同的資料庫,對系統而言是 transparent 的 *  但是需要用不同的 database name 去拿取 spool * *  因為資料庫有轉碼的問題,所以我們通常(應該)不會直接用這個 Class, *  而是使用 emisDb * *  @see com.emis.db.emisDbConnector * */public class emisDbMgr extends emisAbstractMgr{    public static final String STR_EMIS_DBMGR = "com.emis.dbmgr";    private static Hashtable oContextMap = new Hashtable();    private Hashtable PoolHash_ = new Hashtable();    private emisDbConnector oDefaultConnector_;    public emisDbMgr(ServletContext application,Properties props) throws Exception    {        super(application,STR_EMIS_DBMGR,"emisDbMgr");       // abel add for james  為了能傳一個projname 就能拿到 讓emisdb 所以先store 所有的servletcontext 並把project name 全轉成大寫避免錯誤        oContextMap.put(props.getProperty("server.bindname").toUpperCase(),application);    // init emisDbObjectSpool        String _sSize = props.getProperty("object.spool.emisdb.size");        int _nSize = 20; // default size        if (_sSize != null )        {            try {                _nSize = Integer.parseInt(_sSize);            }catch(Exception ignore) {}        }        emisDbObjectSpool _oDbObjectSpool = new emisDbObjectSpool(application_,_nSize);    // register all data spools        int _nSpoolIdx = 1;        Properties _oPool = null;        while ( true )        {            String _sPrefix = "spool." + _nSpoolIdx + ".";            _oPool = emisUtil.subProperties(_sPrefix,props);            // 至少要有四個 property 才能 register            // dbname , url , username ,password            if( _oPool == null ) break;            if( _oPool.size() < 4 ) break;            try {              registerpool(_oPool);            } catch (Exception e ) {              // 此處只能用 warning , 不能 re-throw Exception              // 因為開機時 database 可能會比較慢,所以會有              // Exception 可能是正常, 在此處 Throw Exception              // 會造成 emisDbMgr 有問題              emisTracer.get(application).warning(this,e);            }            _nSpoolIdx++;        }    }    /**     * get the singleton emisDbMgr Object     */    public static emisDbMgr getInstance(ServletContext application) throws Exception    {        emisDbMgr _oMgr = (emisDbMgr) application.getAttribute(emisDbMgr.STR_EMIS_DBMGR);        if( _oMgr == null )        {            emisTracer.get(application).sysError(null,emisError.ERR_SVROBJ_NOT_BIND,"emisDbMgr");        }        return _oMgr;    }/*  -------------------------interface from Mgr --------------------------*/    /**     * 由 abstract database name 拿取 emisDbConnector     *     * @param sDbName    database name defined in System Confing (server.cfg)     */    public synchronized emisDbConnector getConnector(String sDbName) throws Exception    {        if( sDbName == null ) return null;        sDbName = sDbName.toUpperCase();        emisDbConnector _oConnector = (emisDbConnector) PoolHash_.get(sDbName);        if( _oConnector == null )          emisTracer.get(application_).sysError(this,emisError.ERR_DB_SPOOL_NOT_FOUND,sDbName);        return _oConnector;    }    public synchronized emisDbConnector getConnector() throws Exception    {        if( oDefaultConnector_ == null )        {            emisTracer.get(application_).sysError(this,emisError.ERR_DB_SPOOL_DEFAULT_NOT_DEFINED);        }        return oDefaultConnector_;    }    public void setProperty(int propertyID,Object oValue) throws Exception    {    }    /**     * param props     * return void     */    protected void registerpool(Properties props) throws Exception    {        String _sDbName =  (String) props.get("dbname");        String _sImpl   =  (String) props.get("implementation");        String _sType   =  (String) props.get("type");        if( (_sDbName == null) || (_sImpl == null) )        {            emisTracer.get(application_).sysError(this,emisError.ERR_DB_REG_SPOOL_NO_NAME_OR_CLASS);        }        Class [] _aConstructor = new Class[2];        _aConstructor[0] = javax.servlet.ServletContext.class;        _aConstructor[1] = props.getClass();        Constructor _oCt  = Class.forName(_sImpl).getConstructor(_aConstructor);        Object [] _aParameter = new Object[2];        _aParameter[0] = application_;        _aParameter[1] = props;        emisDbConnector _oConnector = (emisDbConnector) _oCt.newInstance(_aParameter);        if( "default".equalsIgnoreCase(_sType) )        {          oDefaultConnector_ = _oConnector ;        }        if( oDefaultConnector_ == null )        {            oDefaultConnector_ = _oConnector ;        }        _sDbName = _sDbName.toUpperCase();        PoolHash_.put(_sDbName,_oConnector);        emisTracer.get(application_).info(this,"Register DbConnector:"+_sDbName);    }            private emisSQLRec [] m_topSQLs = new emisSQLRec[20];    public synchronized void setTopSQL(String sSQL,ArrayList oParam,long startTime)    {            if( sSQL == null ) return;            long execTime = System.currentTimeMillis() - startTime;       //if( execTime < 5000 ) return; // 小於 5 秒的不用記錄      //emisSQLRec newRec = new emisSQLRec(sSQL,startTime,execTime);      int minIdx=0;      long minExecTime = Long.MAX_VALUE;      // algorithm:      // 先找空的,順便找最小的 execTime,有就填      for(int i=0;i<m_topSQLs.length;i++) {        emisSQLRec rec = m_topSQLs[i];        if( rec == null ) {          sSQL = replaceParam( sSQL ,oParam);          m_topSQLs[i] = new emisSQLRec(sSQL,startTime,execTime);          return;        }        if( rec.nExecTime < minExecTime ) {          minIdx = i;          minExecTime = rec.nExecTime;        }      }      if( execTime > minExecTime ) {        sSQL = replaceParam(sSQL ,oParam);        m_topSQLs[minIdx] = null;        m_topSQLs[minIdx] = new emisSQLRec(sSQL,startTime,execTime);      }    }    // a FIFO....    Vector oSQLError = new Vector();    public void setSQLError(String sSQL,ArrayList oParam ,long startTime ,SQLException err) {    	        if( sSQL == null ) return;        long execTime = System.currentTimeMillis() - startTime;        sSQL = replaceParam(sSQL,oParam);    	emisSQLRec rec = new emisSQLRec(sSQL,startTime,execTime,err);    	oSQLError.add(0, rec);    	if( oSQLError.size() > 20 ) {    		oSQLError.remove( oSQLError.size()-1 );    	}    }    public Vector getSQLErr20 () {    	return oSQLError;    }    private String replaceParam(String sSQL,ArrayList oParam) {      if( oParam == null ) return sSQL;      int size = oParam.size();      if( size == 0 ) return sSQL;      for(int i=0;i<size;i++) {        int idx = sSQL.indexOf("?");        if( idx == -1 ) // no ?          break;        Object o = oParam.get(i);        if( o == null )          sSQL = sSQL.substring(0,idx) + "''" + sSQL.substring(idx+1);        else          sSQL = sSQL.substring(0,idx) + "'"+o.toString()+"'" + sSQL.substring(idx+1);      }      return sSQL;    }    public emisSQLRec [] getTopSQL()    {      return m_topSQLs;    }    /**     * 清空 Top 10 的記錄,重新記錄     */    public synchronized void clearTopSQL()    {      for(int i=0; i< m_topSQLs.length; i++) {    	  m_topSQLs[i]= null;      }    }    //  get 相對應的servletcontext   public static synchronized ServletContext getServletContext(String sProjName){       return (ServletContext)oContextMap.get(sProjName.toUpperCase());   }}