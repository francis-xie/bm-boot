package com.emis.util;import com.emis.qa.emisServletContext;import com.emis.server.emisServer;import com.emis.server.emisServerFactory;import org.apache.log4j.*;import javax.servlet.ServletContext;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.util.Properties;import java.util.HashMap;/** * $Id$ * 包裝Log4J的Logger, 以簡化Log檔的使用. * * @author Jerry 2004/7/3 下午 11:34:27 *         version 1.1 2007/06/07 Jerry *         原有程式在同時有兩個Logger在寫檔時，前面的Logger會把內容寫到後面的log檔裡. *         修改後的程式只使用WEB-INF/emisLogger.properties裡兩個設定： *         log4j.appender.A2.layout.ConversionPattern *         log4j.appender.A2.Append *         log檔名固定寫到logs目錄裡. *         version 1.2 2007/07/05 Jerry *         由外部傳入log檔時仍會用ClassName為名, 造成都寫到emisLogger.log裡了. *         version 1.3 2007/08/03 Jerry *         已被啟始的Logger會因為addAppender()重覆被執行而導致一行訊息變成數行. *         說明：在定時排程作業裡每執行一次, 則叫用getlog4j時會做一次addAppender(), 執行3次則會被附加3個Appender, *         導致第3次的輸入會重覆變成3行(每個Appender輸出1行，3個Appender就變成3行) *         解決：增加一個HashMap存放叫用的Class name，沒使用過的才會addAppender(). *         <p> *         2010/1/7 Robert , 原本的寫法和一般用法不太一樣,因為反應常會有 log 檔寫錯檔的情況 ,這邊做了修改來做測試 *         1. emisLogger.properties 内的 log4j.appender.A2.File=${wwwroot}/logs/log4j.log *         應該 mark 掉,因為我們主要用 category 方式, 這樣所有的 log 都會多總合一次到 log4j.log *         應該是不必要的 *         2. 修改 emisLoger 不用 extend Logger *         3. 修改 properties 只讀一次 *         2010/02/24 joe upd 未配置到 emisLogger.properties 中的class自動根據class name產生log,之前被註釋掉了導致無法產生log */public class emisLogger {  static boolean bInit = false;  //private emisLogger(String sFile) {  //super(sFile);  //}  private static Properties oProps_;  private static HashMap mapClassNames_ = new HashMap();  // 存放使用過本class的ClassName  private static void initLog4j(ServletContext oContext) throws Exception {    if (!bInit) {      oProps_ = getLog4jProperties(getPathName(oContext) + "\\web-inf\\emisLogger.properties");      // 2010/02/22 Joe.yao add : 增加判斷邏輯，當不設定時自動取CFG檔設定的WebAp 根目錄（documentroot）      if (oProps_.get("wwwroot") == null || "".equals(oProps_.get("wwwroot"))) {        oProps_.setProperty("wwwroot", getPathName(oContext).toString());      }      PropertyConfigurator.configure(oProps_);      bInit = true;    }  }  public static Logger getlog4j(ServletContext oContext, String sClassName, String sLogName, String sMAXSIZE, String sMAXFILES, String sAppender) {    Logger oLogger = null;    try {      initLog4j(oContext);      //new emisLogger(sClassName);      oLogger = Logger.getLogger(sClassName);      /*      if (oProps_ == null) {        oProps_ = getLog4jProperties(getPathName(oContext) + "\\web-inf\\emisLogger.properties");      }      String _sPattern = null;      boolean _isAppend = true;      if (oProps_ == null) {        _sPattern = "%d{yyyy/MM/dd HH:mm:ss} (%13F:%L) %-5p %m%n";      } else {        _sPattern = (String) oProps_.get("log4j.appender.A2.layout.ConversionPattern");        _isAppend = ((String) oProps_.get("log4j.appender.A2.Append")).equalsIgnoreCase("true");      }        */      // 在mapClassNames_裡找不到才要附加Appender 且不存在配置文檔設定      if (!mapClassNames_.containsKey(sClassName) &&          (oProps_.get("log4j.category." + sClassName) == null || "".equals(oProps_.get("log4j.category." + sClassName)))) {        String _sPattern = null;        boolean _isAppend = true;        String _sMAXSIZE = "1024KB";        int _iMaxFiles = 10;        if (oProps_ == null) {          _sPattern = "%d{yyyy/MM/dd HH:mm:ss} (%13F:%L) %-5p %m%n";        } else {          _sPattern = (String) oProps_.get("log4j.appender.A2.layout.ConversionPattern");          _isAppend = ((String) oProps_.get("log4j.appender.A2.Append")).equalsIgnoreCase("true");          _sMAXSIZE = (String) oProps_.get("log4j.appender.A2.MaxFileSize");          try {            _iMaxFiles = Integer.parseInt((String) oProps_.get("log4j.appender.A2.MaxBackupIndex"));          } catch (Exception e) {          }        }        try {          //如果当前服务与其他AP共用wwwroot,则log输出到单独的文件中。          Properties cfgProp = ((emisServer) oContext.getAttribute(emisServer.STR_EMIS_SERVER)).getProperties();          if (cfgProp != null && "false".equalsIgnoreCase(cfgProp.getProperty("server.lockServer"))) {            sLogName = cfgProp.getProperty("server.bindname") + "." + sLogName;          }        } catch (Exception e) {        }        String _sLogFile = getPathName(oContext) + "\\logs\\" + sLogName;        Layout layout = new PatternLayout(_sPattern);        RollingFileAppender appender = new RollingFileAppender(layout, _sLogFile, _isAppend);        appender.setMaxFileSize(_sMAXSIZE);        appender.setMaxBackupIndex(_iMaxFiles);        oLogger.addAppender(appender);        mapClassNames_.put(sClassName, sLogName);      }    } catch (Exception e) {      e.printStackTrace(System.err);    }    return oLogger;  }  public static Logger getlog4j(ServletContext oContext, String sClassName, String sLogName) throws Exception {    return getlog4j(oContext, sClassName, sLogName, "1024kb", "10", "A2");  }  public static Logger getlog4j(ServletContext oContext, String sClassName, String sLogName, String sMAXSIZE) throws Exception {    return getlog4j(oContext, sClassName, sLogName, sMAXSIZE, "10", "A2");  }  public static Logger getlog4j(ServletContext oContext, String sClassName) throws Exception {    return getlog4j(oContext, sClassName, sClassName + ".log", "1024kb", "10", "A2");  }  public static Properties getLog4jProperties(String sFileName) throws Exception {    FileInputStream in = null;    try {      in = new FileInputStream(sFileName);      Properties _oProps = new Properties();      _oProps.load(in);      return _oProps;    } catch (FileNotFoundException e) {      System.err.println("emisLogger: File not exists " + e.getMessage());    } catch (IOException e) {      System.err.println("emisLogger: IO error " + e.getMessage());    } finally {      if (in != null) in.close();    }    return null;  }  private static Object getPathName(ServletContext oContext) {    String serverName = "";    try {      emisServer _oServer = (emisServer) oContext.getAttribute(emisServer.STR_EMIS_SERVER);      if (_oServer == null) throw new Exception("server 不存在");      Properties _oProp = _oServer.getProperties();      serverName = _oProp.getProperty("documentroot");    } catch (Exception e) {      e.printStackTrace(System.err);    }    return serverName;  }  public static void main(String[] argv) {    try {      emisServletContext servlet = new emisServletContext();      emisServerFactory.createServer(servlet, "c:\\wwwroot\\epos", "c:\\resin3\\smepos.cfg", true);      Logger log1 = emisLogger.getlog4j(servlet, "log1");      log1.info("log1 1");      Logger log2 = emisLogger.getlog4j(servlet, "log2");      log1.info("log1 2");      log2.info("log2 1");      log2.info("log2 2");      log1.info("log1 3");    } catch (Exception e) {      e.printStackTrace();    }  }}